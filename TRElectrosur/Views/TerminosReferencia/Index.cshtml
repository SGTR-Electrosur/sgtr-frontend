@model List<TRElectrosur.Models.TDR>
@{
    ViewData["Title"] = "Términos de Referencia";

    // Depuración para tipos de TDR
    var tiposTDR = ViewBag.TDRTypes as List<TRElectrosur.Models.TDRType>;
    var cantidadTipos = tiposTDR?.Count ?? 0;
}

<div class="container-fluid px-0">
    <!-- Cabecera de la página -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">Términos de Referencia</h1>
            <p class="mb-0 text-muted">Gestión de términos de referencia</p>
        </div>
        <button type="button" class="btn btn-primary d-flex align-items-center" data-bs-toggle="modal" data-bs-target="#seleccionarTipoTDRModal" style="background-color: #2a3c7d; border-color: #2a3c7d;">
            <i class="fas fa-plus-circle me-2"></i>
            Nuevo Término de Referencia
        </button>
    </div>

    @if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger mb-4">
            @ViewBag.ErrorMessage
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success mb-4">
            @TempData["SuccessMessage"]
        </div>
    }

    <!-- Tabla de términos de referencia -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center bg-white">
            <h6 class="m-0 font-weight-bold" style="color: #2a3c7d;">Listado de Términos de Referencia</h6>
        </div>
        <div class="card-body">
            <div id="sin-datos" class="d-none">
                <div class="alert alert-info">No hay términos de referencia disponibles</div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover" id="tablaTDR" width="100%" cellspacing="0">
                    <thead class="bg-light">
                        <tr>
                            <th>ID</th>
                            <th>Título</th>
                            <th>Creado por</th>
                            <th>Fecha Creación</th>
                            <th>Última Actualización</th>
                            <th class="text-center">Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            @foreach (var tdr in Model)
                            {
                                <tr>
                                    <td>@tdr.TDRID</td>
                                    <td>@tdr.Title</td>
                                    <td>@tdr.CreatedByUserName</td>
                                    <td>@tdr.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>@(tdr.UpdatedAt.HasValue ? tdr.UpdatedAt.Value.ToLocalTime().ToString("dd/MM/yyyy HH:mm") : "-")</td>
                                    <td class="text-center">
                                        @{
                                            string badgeClass = "bg-secondary";
                                            string stateName = "Desconocido";

                                            switch (tdr.CurrentStateID)
                                            {
                                                case 1: // Borrador
                                                    badgeClass = "bg-info";
                                                    stateName = "Borrador";
                                                    break;
                                                case 2: // Pendiente de Revisión
                                                    badgeClass = "bg-warning text-dark";
                                                    stateName = "Pendiente de Revisión";
                                                    break;
                                                case 3: // Observado
                                                    badgeClass = "bg-danger";
                                                    stateName = "Observado";
                                                    break;
                                                case 4: // Pendiente de Revisión Corregida
                                                    badgeClass = "bg-warning text-dark";
                                                    stateName = "Pendiente de Revisión Corregida";
                                                    break;
                                                case 5: // Aprobado
                                                    badgeClass = "bg-success";
                                                    stateName = "Aprobado";
                                                    break;
                                                case 6: // Anulado
                                                    badgeClass = "bg-dark";
                                                    stateName = "Anulado";
                                                    break;
                                            }
                                        }
                                        <span class="badge @badgeClass">@stateName</span>
                                    </td>
                                    <td>
                                        @if (tdr.CurrentStateID == 5) // Si está Aprobado
                                        {
                                            <a href="@Url.Action("Editar", "TerminosReferencia", new { id = tdr.TDRID })" class="btn btn-sm btn-info text-white" style="background-color: #4392f1; border-color: #4392f1;">
                                                <i class="fas fa-eye"></i> Visualizar
                                            </a>
                                        }
                                        else
                                        {
                                            <a href="@Url.Action("Editar", "TerminosReferencia", new { id = tdr.TDRID })" class="btn btn-sm btn-primary" style="background-color: #2a3c7d; border-color: #2a3c7d;">
                                                <i class="fas fa-edit"></i> Editar
                                            </a>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal para seleccionar tipo de TDR y crear nuevo TDR -->
<div class="modal fade" id="seleccionarTipoTDRModal" tabindex="-1" aria-labelledby="seleccionarTipoTDRModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header text-white" style="background-color: #2a3c7d;">
                <h5 class="modal-title" id="seleccionarTipoTDRModalLabel">Crear Nuevo Término de Referencia</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body py-4">
                <form id="formCrearTDR">
                    <!-- Campo de título -->
                    <div class="mb-4">
                        <label for="tdrTitle" class="form-label">Título del Término de Referencia <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="tdrTitle" name="title" required placeholder="Ejemplo: Adquisición de equipos informáticos">
                        <div class="form-text">Ingrese un título descriptivo para el término de referencia.</div>
                    </div>

                    <!-- Selector de tipo de TDR -->
                    <div class="mb-3">
                        <label class="form-label">Seleccione el tipo de TDR <span class="text-danger">*</span></label>
                    </div>

                    <div class="row g-3" id="tipoTDRSelector">
                        @if (ViewBag.TDRTypes != null)
                        {
                            foreach (var type in ViewBag.TDRTypes)
                            {
                                <div class="col-md-4 col-lg-3 col-xl-2-4">
                                    <div class="card h-100 shadow-sm tipo-tdr-card" data-tdr-type-id="@type.TDRTypeID">
                                        <div class="card-body text-center p-4">
                                            <div class="display-1 mb-3" style="color: #2a3c7d;">
                                                @{
                                                    string iconClass = "fas fa-file-alt";

                                                    switch (type.TDRTypeID)
                                                    {
                                                        case 1: // Servicios en General
                                                            iconClass = "fas fa-cogs";
                                                            break;
                                                        case 2: // Locadores de Servicios
                                                            iconClass = "fas fa-user-tie";
                                                            break;
                                                        case 3: // Adquisiciones de Bienes
                                                            iconClass = "fas fa-shopping-cart";
                                                            break;
                                                        case 4: // Servicios de Consultoría
                                                            iconClass = "fas fa-file-alt";
                                                            break;
                                                        case 5: // Servicios de Consultoría
                                                            iconClass = "fas fa-drafting-compass"; // o el icono que prefieras
                                                            break;
                                                    }
                                                }
                                                <i class="@iconClass"></i>
                                            </div>
                                            <h5 class="card-title fw-bold">@type.TypeName</h5>
                                            <p class="card-text text-muted">@type.Description</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>

                    <!-- Mensaje de error -->
                    <div class="alert alert-danger mt-3 d-none" id="errorCrearTDR">
                        Ocurrió un error al crear el TDR. Por favor, intente nuevamente.
                    </div>

                    <!-- Campo oculto para el tipo seleccionado -->
                    <input type="hidden" id="tdrTypeId" name="tdrTypeId" value="">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btnCrearTDR" disabled style="background-color: #2a3c7d; border-color: #2a3c7d;">
                    <i class="fas fa-plus-circle me-1"></i> Crear Término de Referencia
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de confirmación para anular -->
<div class="modal fade" id="anularTDRModal" tabindex="-1" aria-labelledby="anularTDRModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="anularTDRModalLabel">Anular Término de Referencia</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro que desea anular el término de referencia "<span id="tdrTituloAnular"></span>"?</p>
                <p class="text-danger">Esta acción no se puede deshacer.</p>
                <form id="formAnularTDR" method="post" action="@Url.Action("Anular", "TerminosReferencia")">
                    <input type="hidden" id="tdrId" name="id" />
                    <div class="mb-3">
                        <label for="motivo" class="form-label">Motivo de anulación</label>
                        <textarea class="form-control" id="motivo" name="reason" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="btnConfirmarAnular">Anular</button>
            </div>
        </div>
    </div>
</div>

<!-- Estilos personalizados para las tarjetas de selección -->
<style>
    .tipo-tdr-card {
        transition: all 0.3s ease;
        border-radius: 8px;
        cursor: pointer;
        border: 1px solid #e0e0e0;
    }

        .tipo-tdr-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
            border-color: #2a3c7d;
        }

        .tipo-tdr-card.selected-tdr-card {
            border-color: #2a3c7d;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1) !important;
            background-color: #f8f9fe;
        }

    .badge {
        font-size: 0.85rem;
        font-weight: 500;
        padding: 0.35em 0.65em;
    }

    .btn-primary {
        background-color: #2a3c7d;
        border-color: #2a3c7d;
    }

        .btn-primary:hover {
            background-color: #1f2c5d;
            border-color: #1f2c5d;
        }

    .text-primary {
        color: #2a3c7d !important;
    }

    .card-title {
        color: #2a3c7d !important;
    }
</style>
@section Scripts {
    <script>
        $(document).ready(function () {
            console.log("Cantidad de tipos de TDR disponibles: @cantidadTipos");

        @if (tiposTDR != null && tiposTDR.Any())
        {
            foreach (var tipo in tiposTDR)
            {
                <text>console.log("Tipo TDR: ID=@tipo.TDRTypeID, Nombre=@tipo.TypeName"); </text>
            }
        }

                    // Verificar si hay datos en la tabla
                    var hayDatos = @(Model != null && Model.Any() ? "true" : "false");

            if (hayDatos) {
                // Inicialización de DataTables solo si hay datos
                $('#tablaTDR').DataTable({
                    language: dataTablesSpanish,
                    responsive: true,
                    order: [[4, 'desc']] // Ordenar por fecha de creación descendente
                });
            } else {
                // Mostrar mensaje cuando no hay datos
                $('#sin-datos').removeClass('d-none');
                $('.table-responsive').addClass('d-none');
            }

            // Variables para controlar la selección del tipo de TDR
            let selectedTDRTypeId = null;

            // Manejar la selección de las tarjetas
            $(document).on('click', '.tipo-tdr-card', function () {
                // Remover la clase "selected" de todas las tarjetas
                $('.tipo-tdr-card').removeClass('selected-tdr-card');

                // Agregar la clase "selected" a la tarjeta clickeada
                $(this).addClass('selected-tdr-card');

                // Guardar el ID del tipo seleccionado
                selectedTDRTypeId = $(this).data('tdr-type-id');
                $('#tdrTypeId').val(selectedTDRTypeId);

                console.log("Tipo TDR seleccionado: " + selectedTDRTypeId);

                // Habilitar el botón de crear si hay título y tipo seleccionado
                validateForm();
            });

            // Validar el formulario cuando se cambia el título
            $('#tdrTitle').on('input', function () {
                validateForm();
            });

            // Función para validar el formulario
            function validateForm() {
                const title = $('#tdrTitle').val().trim();
                const isValid = title.length > 0 && selectedTDRTypeId !== null;

                console.log("Validación del formulario:");
                console.log("Título: " + title);
                console.log("Tipo TDR seleccionado: " + selectedTDRTypeId);
                console.log("Formulario válido: " + isValid);

                // Habilitar/deshabilitar el botón de crear según la validación
                $('#btnCrearTDR').prop('disabled', !isValid);
            }

            // Manejar el envío del formulario
            $('#btnCrearTDR').on('click', function () {
                // Mostrar indicador de carga
                $(this).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creando...');
                $(this).prop('disabled', true);

                // Ocultar mensaje de error si estaba visible
                $('#errorCrearTDR').addClass('d-none');

                // Obtener datos del formulario
                const formData = {
                    title: $('#tdrTitle').val().trim(),
                    tdrTypeId: selectedTDRTypeId
                };

                // Realizar la petición AJAX
                $.ajax({
                    url: '@Url.Action("CreateTDR", "TerminosReferencia")', // Usar nuestro proxy
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function (response) {
                        // Cerrar el modal
                        $('#seleccionarTipoTDRModal').modal('hide');

                        // Mostrar mensaje de éxito
                        showToast('Éxito', 'TDR creado correctamente. ID: ' + response.tdrId, 'success');

                        // Recargar la página para actualizar la lista
                        setTimeout(function () {
                            location.reload();
                        }, 1500);
                    },
                    error: function (xhr, status, error) {
                        // Mostrar información detallada del error para depuración
                        console.error("Error al crear TDR:");
                        console.error("Status: " + status);
                        console.error("Error: " + error);
                        if (xhr.responseJSON) {
                            console.error("Response JSON: ", xhr.responseJSON);
                        } else if (xhr.responseText) {
                            console.error("Response Text: " + xhr.responseText);
                        }

                        // Mostrar mensaje de error
                        $('#errorCrearTDR').removeClass('d-none');
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            $('#errorCrearTDR').text(xhr.responseJSON.message);
                        }

                        // Restaurar el botón
                        $('#btnCrearTDR').html('<i class="fas fa-plus-circle me-1"></i> Crear Término de Referencia');
                        $('#btnCrearTDR').prop('disabled', false);
                    }
                });
            });

            // Reiniciar el formulario cuando se cierra el modal
            $('#seleccionarTipoTDRModal').on('hidden.bs.modal', function () {
                // Limpiar el campo de título
                $('#tdrTitle').val('');

                // Deseleccionar todas las tarjetas
                $('.tipo-tdr-card').removeClass('selected-tdr-card');

                // Reiniciar el tipo seleccionado
                selectedTDRTypeId = null;
                $('#tdrTypeId').val('');

                // Deshabilitar el botón de crear
                $('#btnCrearTDR').prop('disabled', true);
                $('#btnCrearTDR').html('<i class="fas fa-plus-circle me-1"></i> Crear Término de Referencia');

                // Ocultar mensaje de error
                $('#errorCrearTDR').addClass('d-none');
            });
        });

        // Función para mostrar toast
        function showToast(title, message, type) {
            // Si ya existe un contenedor de toasts, úsalo; de lo contrario, créalo
            if ($('#toast-container').length === 0) {
                $('body').append('<div id="toast-container" class="position-fixed top-0 end-0 p-3" style="z-index: 1100;"></div>');
            }

            // Generar un ID único para el toast
            const toastId = 'toast-' + Date.now();

            // Definir la clase de estilo según el tipo de toast
            let bgClass = 'bg-primary';
            if (type === 'success') bgClass = 'bg-success';
            if (type === 'error') bgClass = 'bg-danger';
            if (type === 'warning') bgClass = 'bg-warning text-dark';

            // Crear el HTML del toast
            const toastHtml = `
                                        <div id="${toastId}" class="toast align-items-center ${bgClass} text-white border-0" role="alert" aria-live="assertive" aria-atomic="true">
                                            <div class="d-flex">
                                                <div class="toast-body">
                                                    <strong>${title}</strong>: ${message}
                                                </div>
                                                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                                            </div>
                                        </div>
                                    `;

            // Añadir el toast al contenedor
            $('#toast-container').append(toastHtml);

            // Inicializar y mostrar el toast
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, {
                delay: 5000
            });
            toast.show();
        }
    </script>
}

                                            <style>
    /* Estilos existentes ... */
    
    /* Clase personalizada para 5 columnas */
    .col-xl-2-4 {
        position: relative;
        width: 100%;
        padding-right: 0.75rem;
        padding-left: 0.75rem;
    }
    
    @@media (min-width: 1200px) {
        .col-xl-2-4 {
            flex: 0 0 20%;
            max-width: 20%;
        }
    }
    
    /* Ajustar el tamaño de las cards para que sean más compactas */
    .tipo-tdr-card .card-body {
        padding: 1.5rem 1rem;
    }
    
    .tipo-tdr-card .display-1 {
        font-size: 2.5rem;
        margin-bottom: 1rem;
    }
    
    .tipo-tdr-card .card-title {
        font-size: 0.95rem;
        margin-bottom: 0.5rem;
    }
    
    .tipo-tdr-card .card-text {
        font-size: 0.85rem;
    }
</style>