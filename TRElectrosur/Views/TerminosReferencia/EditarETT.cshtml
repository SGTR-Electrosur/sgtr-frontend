@model TRElectrosur.Models.TDREditViewModel
@{
    ViewData["Title"] = "Visualizar Especificaciones Técnicas";

    // Deserializar los datos JSON en la vista
    var fieldsData = System.Text.Json.JsonDocument.Parse(Model.RawFieldsData);
    var version = fieldsData.RootElement.GetProperty("version");
    var fields = fieldsData.RootElement.GetProperty("fields");

    // Determinar si el usuario es administrador
    bool isAdmin = Model.UserRoleId == 1;

    // Determinar si puede editar según el rol y estado del TDR
    bool canEdit = true;

    // Si el TDR está anulado, nadie puede editar
    if (Model.TDR.CurrentStateID == 6) // Anulado
    {
        canEdit = false;
    }
    // Si es usuario estándar y el TDR está en estado Pendiente de Revisión o Aprobado, no puede editar
    else if (!isAdmin && (Model.TDR.CurrentStateID == 2 || Model.TDR.CurrentStateID == 4 || Model.TDR.CurrentStateID == 5))
    {
        canEdit = false;
    }

    // Listas de categorías de campos para organizar la visualización según la nueva estructura para ETT
    var infoGeneralFields = new List<string> { "organoUnidadOrganicaEETT", "planPoiEETT", "finalidadPublicaEETT", "objetivoContratacionEETT" };
    var descripcionBienFields = new List<string> { "descripcionBienEETT" };
    var alcancesFields = new List<string> { "gestionRiesgosEETT", "reglamentosEETT", "acondicionamientoEETT", "segurosEETT", "garantiaComercialEETT", "muestrasEETT", "prestacionesAccesoriasEETT" };
    var requisitosFields = new List<string> { "requisitosProveedorEETT", "formacionAcademicaEETT", "experienciaLaboralEETT", "capacitacionesEETT" };
    var plazoEntregaFields = new List<string> { "lugarEntregaEETT", "plazoEntregaEETT", "conformidadEETT", "informeActividadesEETT" };
    var condicionesFields = new List<string> { "sistemaContratacionEETT", "formaCondicionesPagoEETT", "responsabilidadProveedorEETT", "penalidadesMoraEETT", "otrasPenalidadesEETT", "medidasSeguridadEETT", "sancionesEETT", "clausulaEETT", "anexosEETT" };

    // Diccionario para convertir nombres de campo técnicos a nombres amigables
    var friendlyNames = new Dictionary<string, string>
    {
        { "organoUnidadOrganicaEETT", "Órgano y/o Unidad Orgánica" },
        { "planPoiEETT", "Plan POI" },
        { "finalidadPublicaEETT", "Finalidad Pública" },
        { "objetivoContratacionEETT", "Objetivo de la Contratación" },
        { "descripcionBienEETT", "Descripción del Bien" },
        { "gestionRiesgosEETT", "Gestión de Riesgos" },
        { "reglamentosEETT", "Reglamentos Técnicos y Normas" },
        { "acondicionamientoEETT", "Acondicionamiento, Montaje o Instalación" },
        { "segurosEETT", "Seguros" },
        { "garantiaComercialEETT", "Garantía Comercial" },
        { "muestrasEETT", "Muestras" },
        { "prestacionesAccesoriasEETT", "Prestaciones Accesorias" },
        { "requisitosProveedorEETT", "Requisitos del Proveedor" },
        { "formacionAcademicaEETT", "Formación Académica" },
        { "experienciaLaboralEETT", "Experiencia Laboral" },
        { "capacitacionesEETT", "Capacitaciones" },
        { "lugarEntregaEETT", "Lugar de Entrega" },
        { "plazoEntregaEETT", "Plazo de Entrega" },
        { "conformidadEETT", "Conformidad" },
        { "informeActividadesEETT", "Informe de las Actividades Realizadas" },
        { "sistemaContratacionEETT", "Sistema de Contratación" },
        { "formaCondicionesPagoEETT", "Forma y Condiciones de Pago" },
        { "responsabilidadProveedorEETT", "Responsabilidad del Proveedor" },
        { "penalidadesMoraEETT", "Penalidades por Mora" },
        { "otrasPenalidadesEETT", "Otras Penalidades" },
        { "medidasSeguridadEETT", "Medidas de Seguridad" },
        { "sancionesEETT", "Sanciones" },
        { "clausulaEETT", "Cláusula" },
        { "anexosEETT", "Anexos" }
    };

    // Lista de campos que deben usar textarea en lugar de editor HTML
    var textareaFields = new List<string> { "organoUnidadOrganicaEETT", "planPoiEETT", "finalidadPublicaEETT" };
}

<style>
    /* Estilos para las instrucciones de campo */
    .campo-instruccion {
        background-color: #e7f1ff;
        border-left: 4px solid #2a3c7d;
        padding: 12px 15px;
        margin-bottom: 15px;
        border-radius: 4px;
        font-style: italic;
    }

        .campo-instruccion p {
            color: #505c8c;
            margin-bottom: 0;
            font-size: 0.85rem;
            line-height: 1.4;
        }
</style>

@{
    // Diccionario con las instrucciones para cada campo, siguiendo el formato del documento Word
    var instruccionesCampos = new Dictionary<string, string>
    {
        // Sección: Información General
        { "organoUnidadOrganicaEETT", "INDICAR EL ÓRGANO Y/O UNIDAD ORGÁNICA, RESPONSABLE DEL REQUERIMIENTO" },
        { "planPoiEETT", "INDICAR EL CÓDIGO Y LA DENOMINACIÓN DEL PLAN POI" },
        { "finalidadPublicaEETT", "INDICAR QUE SE BUSCA SATISFACER, MEJORAR Y/O ATENDER CON LA CONTRATACIÓN REQUERIDA" },
        { "objetivoContratacionEETT", "INDICAR CUÁL ES EL OBJETIVO DE LA CONTRATACIÓN QUE PERMITA CONOCER AL PROVEEDOR CLARAMENTE QUE BENEFICIOS PRETENDE OBTENER, MEDIANTE LA ADQUISICIÓN DEL BIEN" },

        // Sección: Descripción del Bien
        { "descripcionBienEETT", "DETALLAR LAS CARACTERÍSTICAS FÍSICAS Y TÉCNICAS DEL BIEN, PARA SATISFACER LA NECESIDAD DE LA ENTIDAD. ASIMISMO, LA DIMENSIÓN, COMPOSICIÓN, MATERIAL, EMPAQUE, AÑO DE FABRICACIÓN MÍNIMO DEL BIEN, REPUESTOS, ACCESORIOS, CONDICIONES DE ALMACENAMIENTO, COMPATIBILIDAD CON ALGÚN EQUIPO O COMPONENTE, ENTRE OTROS" },

        // Sección: Alcances
        { "gestionRiesgosEETT", "INDICAR LOS RIESGOS A LOS POSIBLES EVENTOS QUE PUEDAN AFECTAR EL CUMPLIMIENTO DE LOS OBJETIVOS Y LA FINALIDAD PÚBLICA QUE PERSIGUEN AL ADQUIRIR BIENES, SERVICIOS Y OBRAS" },
        { "reglamentosEETT", "SEÑALAR REGLAMENTOS TÉCNICOS, NORMAS METROLÓGICAS Y/O SANITARIAS, REGLAMENTOS Y DEMÁS NORMAS QUE REGULAN EL OBJETO DE LA CONTRATACIÓN CON CARÁCTER OBLIGATORIO" },
        { "acondicionamientoEETT", "DE SER EL CASO, SE DEBE INDICAR EL LUGAR, PROCEDIMIENTO, LOS EQUIPOS Y OPERARIOS NECESARIOS, ASÍ COMO EL ESPACIO REQUERIDO PARA LA REALIZACIÓN DE LOS TRABAJOS DE INSTALACIÓN" },
        { "segurosEETT", "DE SER EL CASO, PRECISAR EL TIPO DE SEGURO QUE SE EXIGE AL PROVEEDOR, LA COBERTURA, EL PLAZO, MONTO DE COBERTURA Y OPORTUNIDAD DE SU PRESENTACIÓN" },
        { "garantiaComercialEETT", "LAS ÁREAS USUARIAS DEBEN INDICAR EL ALCANCE DE LA GARANTÍA, CONDICIONES DE LA GARANTÍA, PERIODO E INICIO DEL CÓMPUTO DE LA GARANTÍA" },
        { "muestrasEETT", "SE DEBE INDICAR LOS PROCEDIMIENTOS QUE SE REALIZAR PARA VERIFICAR LA CALIDAD" },
        { "prestacionesAccesoriasEETT", "SE PUEDE CONSIDERAR COMO PRESTACIONES ACCESORIAS AL MANTENIMIENTO PREVENTIVO, SOPORTE TÉCNICO, CAPACITACIÓN Y/O ENTRENAMIENTO DEL PERSONAL DE LA ENTIDAD, POR LO QUE SE DEBE PRECISAR EL TIPO, PROCEDIMIENTO, LUGAR, TIPO DE CERTIFICACIÓN QUE SE OTORGA, SEGÚN LA PRESTACIÓN SOLICITADA" },

        // Sección: Requisitos
        { "requisitosProveedorEETT", "Ruc activo y habido. Registro Nacional de Proveedores, de ser el caso. (solo se debe solicitar RNP en caso que el monto supere 01 UIT)" },
        { "formacionAcademicaEETT", "CONSIGNAR EL GRADO O TÍTULO PROFESIONAL REQUERIDO, CONSIDERANDO LOS NIVELES ESTABLECIDOS POR LA NORMATIVA EN LA MATERIA] DEL PERSONAL CLAVE REQUERIDO COMO [CONSIGNAR EL PERSONAL CLAVE REQUERIDO PARA EJECUTAR LA PRESTACIÓN OBJETO DE LA CONVOCATORIA DEL CUAL DEBE ACREDITARSE ESTE REQUISITO]" },
        { "experienciaLaboralEETT", "[CONSIGNAR EL TIEMPO DE EXPERIENCIA MÍNIMO] en [CONSIGNAR LOS TRABAJOS O PRESTACIONES EN LA ACTIVIDAD REQUERIDA] del personal clave requerido como [CONSIGNAR EL PUESTO, CARGO O DENOMINACIÓN DE LA POSICIÓN QUE OCUPARÁ EL PERSONAL CLAVE REQUERIDO]" },
        { "capacitacionesEETT", "[CONSIGNAR LA CANTIDAD DE HORAS LECTIVAS HASTA UN MÁXIMO DE 120] horas lectivas, en [CONSIGNAR LA MATERIA O ÁREA DE CAPACITACIÓN] del personal clave requerido como [CONSIGNAR EL PERSONAL CLAVE REQUERIDO PARA EJECUTAR LA PRESTACIÓN OBJETO DE LA CONVOCATORIA RESPECTO DEL CUAL SE DEBE ACREDITAR ESTE REQUISITO]" },

        // Sección: Plazos y Entregables
        { "lugarEntregaEETT", "PRECISAR LA DIRECCIÓN EXACTA DONDE SERÁN ENTREGADOS LOS BIENES EN EL ALMACÉN DE ELECTROSUR (DONDE DEBE ESPECIFICAR DISTRITO, PROVINCIA Y REGIÓN)" },
        { "plazoEntregaEETT", "DEFINIR EL PLAZO MÁXIMO DE ENTREGA EN DÍAS CALENDARIO, INDICAR EL INICIO DEL PLAZO DE LA ENTREGA DEL BIEN O CONTADOS A PARTIR DEL DÍA SIGUIENTE DE NOTIFICADO EL PEDIDO DE COMPRA, EN CASO SE ESTABLEZCA CONDICIONES PREVIAS PARA LA ADQUISICIÓN DEL BIEN, SE DEBE PRECISAR DICHO PLAZO" },
        { "conformidadEETT", "CONSIGNAR EL CARGO Y ÓRGANO Y/O UNIDAD ORGÁNICA RESPONSABLE DE OTORGAR LA CONFORMIDAD DEL BIEN Y PRECISAR EL PROCEDIMIENTO Y REQUISITOS QUE DEBE CUMPLIR EL PROVEEDOR PARA EL OTORGAMIENTO DE LA CONFORMIDAD" },
        { "informeActividadesEETT", "EN CASO DE REQUERIR ACONDICIONAMIENTO, MONTAJE, INSTALACIÓN O PRESTACIONES ACCESORIAS. DETALLANDO EL CONTENIDO DEL INFORME A PRESENTAR" },

        // Sección: Condiciones
        { "sistemaContratacionEETT", "PRECISAR EL SISTEMA DE A SUMA ALZADA O A PRECIOS UNITARIOS" },
        { "formaCondicionesPagoEETT", "EXPRESAR LA FORMA DE PAGO: UNICA O PARCIAL (EN EL CASO DE SER PARCIAL DEBERÁ GUARDAR RELACIÓN CON LAS ENTREGAS PARCIALES Y LA CONFORMIDAD)" },
        { "responsabilidadProveedorEETT", "CONSIGNAR TIEMPO EN AÑOS, NO MENOR DE UN (1) AÑO, CONSIDERANDO LO DISPUESTO EN EL GAL-2078-2023 DEL EXPEDIENTE 20230300012247" },
        { "penalidadesMoraEETT", "En caso de retraso injustificado del contratista en la ejecución de las prestaciones objeto del contrato, la entidad contratante le aplica automáticamente una penalidad por mora por cada día de atraso que le sea imputable" },
        { "otrasPenalidadesEETT", "DE ACUERDO AL TIPO DE CONTRATACIÓN LAS ÁREAS USUARIAS PUEDEN ESTABLECER OTRAS PENALIDADES DIFERENTES AL RETRASO, LAS CUALES DEBEN SER OBJETIVAS, RAZONABLES Y PROPORCIONALES CON EL OBJETO DE LA CONTRATACIÓN, POR LO QUE SE DEBE PRECISAR EL LISTADO DE LAS SITUACIONES, CONDICIONES, EL PROCEDIMIENTO DE VERIFICACIÓN DE LAS OCURRENCIAS Y LOS MONTOS O PORCENTAJES A APLICAR" },
        { "medidasSeguridadEETT", "INDICAR SI CORRESPONDE ALTO RIESGO O BAJO RIESGO O NO CORRESPONDE" },
        { "sancionesEETT", "El Tribunal de Contrataciones Públicas sancionará a los participantes, postores, proveedores, y subcontratistas, cuando incurran en las infracciones administrativas señaladas en la Ley General de Contrataciones Públicas" },
        { "clausulaEETT", "ENTREGA DE RESUMEN DE VALORIZACIÓN SEGÚN ESTRUCTURA DEL MANUAL DE COSTOS DE OSINERGMIN (De corresponder)" },
        { "anexosEETT", "INDICAR LOS ANEXOS NECESARIOS PARA LA CONTRATACIÓN, SI APLICA" }
    };
}


<div class="container-fluid px-0">
    <!-- Cabecera de la página -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">@Model.TDR.Title</h1>
            <p class="mb-0 text-muted">
                <span class="fw-bold">ID:</span> @Model.TDR.TDRID |
                <span class="fw-bold">Tipo:</span> @Model.TDR.TypeName |
                <span class="fw-bold">Estado:</span>
                @{
                    string badgeClass = "bg-secondary";

                    switch (Model.TDR.CurrentStateID)
                    {
                        case 1: // Borrador
                            badgeClass = "bg-info";
                            break;
                        case 2: // Pendiente de Revisión
                        case 4: // Pendiente de Revisión Corregida
                            badgeClass = "bg-warning text-dark";
                            break;
                        case 3: // Observado
                            badgeClass = "bg-danger";
                            break;
                        case 5: // Aprobado
                            badgeClass = "bg-success";
                            break;
                        case 6: // Anulado
                            badgeClass = "bg-dark";
                            break;
                    }
                }
                <span class="badge @badgeClass">@Model.TDR.CurrentStateName</span>
            </p>
        </div>
    </div>

    <style>

        /* Destacar las observaciones para usuarios */
        .observacion-destacada {
            background-color: #FFF0F0;
            border-left: 4px solid #dc3545;
            padding: 10px 15px;
            border-radius: 0.25rem;
            margin-top: 8px;
            font-style: italic;
            color: #842029;
        }

        .nav-tabs .nav-link {
            border-top-left-radius: 0.5rem;
            border-top-right-radius: 0.5rem;
        }

            .nav-tabs .nav-link.active {
                border-color: #dee2e6 #dee2e6 #fff;
                font-weight: 600;
            }

        .card-header h6 {
            margin-bottom: 0;
            font-size: 1rem;
            font-weight: 500;
        }

        .badge {
            font-size: 0.8rem;
            padding: 0.35em 0.65em;
        }

        .form-label {
            font-size: 0.875rem;
            color: #6c757d;
        }

        /* Estilos para el editor HTML */
        .html-editor {
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            padding: 0.5rem;
            min-height: 150px;
            background-color: white;
        }
    </style>

    @section Scripts {
        <!-- CKEditor 5 para editores HTML -->
        <script src="https://cdn.ckeditor.com/ckeditor5/37.1.0/classic/ckeditor.js"></script>

        <script>

            // Función para inicializar el combobox de Órgano y/o Unidad Orgánica
            function initOrganoUnidadOrganicaSelect() {
                var organoSelect = $('#select_organoUnidadOrganicaEETT');
                var organoValue = $('#field_organoUnidadOrganicaEETT').val().trim();

                // Si el combobox no está definido, significa que estamos en modo de solo lectura
                if (organoSelect.length === 0) {
                    // Asegurarse de que el valor se muestra correctamente en modo de solo lectura
                    $('#readonly_organoUnidadOrganicaEETT').text(organoValue);
                    return;
                }

                // Verificar si hay un valor existente para seleccionarlo en el combobox
                if (organoValue) {
                    // Buscar la opción que coincide con el valor existente
                    var matchFound = false;
                    $('#select_organoUnidadOrganicaEETT option').each(function () {
                        if ($(this).val() === organoValue) {
                            matchFound = true;
                            organoSelect.val(organoValue);
                        }
                    });

                    // Si no se encuentra coincidencia exacta, mantener "Seleccione..."
                    if (!matchFound) {
                        organoSelect.val("");
                    }
                } else {
                    // Si no hay valor, seleccionar la opción predeterminada "Seleccione..."
                    organoSelect.val("");
                }
            }

            // Función mejorada para inicializar los selectores personalizados
            function initCustomSelects() {
                // Procesar formaCondicionesPagoEETT
                var formaPagoSelect = $('#select_formaCondicionesPagoEETT');
                var formaPagoValue = $('#field_formaCondicionesPagoEETT').val().trim();

                // Comprobar si estamos en modo de solo lectura
                if (formaPagoSelect.length === 0) {
                    // Mostrar el valor en modo solo lectura
                    $('#readonly_formaCondicionesPagoEETT').text(formaPagoValue);
                } else {
                    // Modo editable - establecer el valor en el combobox
                    if (formaPagoValue.toLowerCase().includes('única') || formaPagoValue.toLowerCase().includes('unica')) {
                        formaPagoSelect.val('Única');
                    } else if (formaPagoValue.toLowerCase().includes('mensual')) {
                        formaPagoSelect.val('Mensual');
                    } else if (formaPagoValue.toLowerCase().includes('parcial')) {
                        formaPagoSelect.val('Parcial');
                    } else {
                        // Si no coincide con ninguno, mantener "Seleccione..."
                        formaPagoSelect.val("");
                    }
                }

                // Procesar medidasSeguridadEETT
                var seguridadSelect = $('#select_medidasSeguridadEETT');
                var seguridadValue = $('#field_medidasSeguridadEETT').val().trim();

                // Comprobar si estamos en modo de solo lectura
                if (seguridadSelect.length === 0) {
                    // Mostrar el valor en modo solo lectura
                    $('#readonly_medidasSeguridadEETT').text(seguridadValue);
                } else {
                    // Modo editable - establecer el valor en el combobox
                    if (seguridadValue.toLowerCase().includes('alto riesgo')) {
                        seguridadSelect.val('Alto Riesgo');
                    } else if (seguridadValue.toLowerCase().includes('bajo riesgo')) {
                        seguridadSelect.val('Bajo Riesgo');
                    } else if (seguridadValue.toLowerCase().includes('no corresponde')) {
                        seguridadSelect.val('No Corresponde');
                    } else {
                        // Si no coincide con ninguno, mantener "Seleccione..."
                        seguridadSelect.val("");
                    }
                }
                
                // Procesar sistemaContratacionEETT
                var sistemaSelect = $('#select_sistemaContratacionEETT');
                var sistemaValue = $('#field_sistemaContratacionEETT').val().trim();

                // Comprobar si estamos en modo de solo lectura
                if (sistemaSelect.length === 0) {
                    // Mostrar el valor en modo solo lectura
                    $('#readonly_sistemaContratacionEETT').text(sistemaValue);
                } else {
                    // Modo editable - establecer el valor en el combobox
                    if (sistemaValue.toLowerCase().includes('suma alzada')) {
                        sistemaSelect.val('Suma Alzada');
                    } else if (sistemaValue.toLowerCase().includes('precios unitarios')) {
                        sistemaSelect.val('Precios Unitarios');
                    } else {
                        // Si no coincide con ninguno, mantener "Seleccione..."
                        sistemaSelect.val("");
                    }
                }
            }

            $(document).ready(function () {

                // Inicialización del combobox para organoUnidadOrganica
                initOrganoUnidadOrganicaSelect();
                initCustomSelects();

                // Colorear las pestañas al hacer clic
                $('button[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
                    // Quitar el color azul de todas las pestañas
                    $('button[data-bs-toggle="tab"]').css('color', '#495057');
                    // Aplicar color azul a la pestaña activa
                    $(this).css('color', '#2a3c7d');
                });

                // Objeto para almacenar las instancias de CKEditor
                var editorInstances = {};

                // Inicializar editores HTML
                $('.html-editor').each(function () {
                    const editorId = $(this).attr('id');
                    const fieldId = editorId.replace('editor_', 'field_');
                    const isReadOnly = $(this).attr('data-readonly') === 'true';

                    ClassicEditor
                        .create(document.getElementById(editorId), {
                            toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'insertTable', 'undo', 'redo']
                        })
                        .then(editor => {
                            // Guardar la instancia del editor para usar más tarde
                            editorInstances[editorId] = editor;

                            // Hacer el editor de solo lectura si es necesario
                            if (isReadOnly) {
                                editor.isReadOnly = true;
                            }

                            // Actualizar el textarea oculto cuando cambia el contenido
                            editor.model.document.on('change:data', () => {
                                document.getElementById(fieldId).value = editor.getData();
                            });

                            // También necesitamos controlar cambios en acondicionamientoEETT
                            if (editorId === 'editor_acondicionamientoEETT') {
                                editor.model.document.on('change:data', () => {
                                    // Si acondicionamientoEETT está vacío, vaciar también segurosEETT
                                    if (editor.getData().trim() === '') {
                                        const segurosEditor = editorInstances['editor_segurosEETT'];
                                        if (segurosEditor) {
                                            segurosEditor.setData('');
                                        }
                                        $('#field_segurosEETT').val('');
                                    }
                                });
                            }
                        })
                        .catch(error => {
                            console.error(error);
                        });
                });

                // Script para manejar la dependencia entre acondicionamientoEETT y segurosEETT
                $('#formEditar').on('submit', function (e) {
                    // Obtener los valores de los campos
                    var acondicionamientoValue = '';
                    var acondicionamientoField = $('#field_acondicionamientoEETT');

                    // Si existe el campo
                    if (acondicionamientoField.length > 0) {
                        acondicionamientoValue = acondicionamientoField.val().trim();
                    }

                    // Si acondicionamientoEETT está vacío, vaciar también segurosEETT
                    if (acondicionamientoValue === '') {
                        // Buscar el campo segurosEETT
                        var segurosField = $('#field_segurosEETT');

                        // Si existe el campo
                        if (segurosField.length > 0) {
                            // Vaciar el campo
                            segurosField.val('');

                            // Como estamos usando CKEditor 5, no podemos acceder directamente a una instancia global
                            // Por lo tanto, almacenaremos la referencia cuando inicialicemos el editor
                        }
                    }

                    // Continuar con el envío normal del formulario
                    return true;
                });

                // ====================================
                // Gestión de estados del TDR
                // ====================================
                const tdrId = @Model.TDR.TDRID;

                // Botones para abrir modales
                $('#btnObservarTDR').on('click', function () {
                    $('#modalObservarTDR').modal('show');
                });

                $('#btnAprobarTDR').on('click', function () {
                    $('#modalAprobarTDR').modal('show');
                });

                $('#btnEnviarRevision').on('click', function () {
                    $('#modalEnviarRevision').modal('show');
                });

                $('#btnEnviarCorreccion').on('click', function () {
                    $('#modalEnviarCorreccion').modal('show');
                });

                // Botones de confirmación
                $('#btnConfirmarObservar').on('click', function () {
                    const reason = $('#observacionMotivo').val().trim();
                    if (!reason) {
                        alert('Por favor, ingrese el motivo de la observación');
                        return;
                    }

                    cambiarEstado(tdrId, 3, reason) // 3 = Observado
                        .then(success => {
                            if (success) {
                                $('#modalObservarTDR').modal('hide');

                                // Después de cambiar el estado a Observado, crear nueva versión
                                crearNuevaVersion(tdrId)
                                    .then(success => {
                                        if (success) {
                                            showToast('Éxito', 'TDR marcado como observado y nueva versión creada', 'success');
                                            setTimeout(() => { location.reload(); }, 1500);
                                        }
                                    });
                            }
                        });
                });

                $('#btnConfirmarAprobar').on('click', function () {
                    const reason = $('#aprobacionMotivo').val().trim() || 'Aprobado por el administrador';

                    cambiarEstado(tdrId, 5, reason) // 5 = Aprobado
                        .then(success => {
                            if (success) {
                                $('#modalAprobarTDR').modal('hide');
                                showToast('Éxito', 'TDR aprobado correctamente', 'success');
                                setTimeout(() => { location.reload(); }, 1500);
                            }
                        });
                });

                $('#btnConfirmarEnviar').on('click', function () {
                    cambiarEstado(tdrId, 2, 'Enviado para revisión') // 2 = Pendiente de Revisión
                        .then(success => {
                            if (success) {
                                $('#modalEnviarRevision').modal('hide');
                                showToast('Éxito', 'TDR enviado para revisión', 'success');
                                setTimeout(() => { location.reload(); }, 1500);
                            }
                        });
                });

                $('#btnConfirmarCorreccion').on('click', function () {
                    cambiarEstado(tdrId, 2, 'Correcciones enviadas para revisión') // 4 = Pendiente de Revisión Corregida
                        .then(success => {
                            if (success) {
                                $('#modalEnviarCorreccion').modal('hide');
                                showToast('Éxito', 'Correcciones enviadas para revisión', 'success');
                                setTimeout(() => { location.reload(); }, 1500);
                            }
                        });
                });

                // Función para cambiar el estado del TDR
                async function cambiarEstado(id, newStateId, reason) {
                    try {
                        const response = await $.ajax({
                            url: `/TerminosReferencia/CambiarEstado?id=${id}&newStateId=${newStateId}&reason=${encodeURIComponent(reason)}`,
                            type: 'POST',
                            dataType: 'json' // Asegúrate de que espera una respuesta JSON
                        });

                        if (response.success) {
                            // Usar la URL de redirección proporcionada por el servidor
                            window.location.href = response.redirectUrl;
                            return true;
                        } else {
                            showToast('Error', response.message || 'No se pudo cambiar el estado del TDR', 'error');
                            return false;
                        }
                    } catch (error) {
                        console.error('Error al cambiar estado:', error);
                        showToast('Error', 'No se pudo cambiar el estado del TDR', 'error');
                        return false;
                    }
                }

                // Función para crear una nueva versión del TDR
                async function crearNuevaVersion(id) {
                    try {
                        const response = await $.ajax({
                            url: '/TerminosReferencia/CrearNuevaVersion',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({
                                id: id
                            })
                        });

                        return response.success;
                    } catch (error) {
                        console.error('Error al crear nueva versión:', error);
                        showToast('Error', 'No se pudo crear una nueva versión del TDR', 'error');
                        return false;
                    }
                }

                // Función para mostrar notificaciones toast
                function showToast(title, message, type) {
                    // Si ya existe un contenedor de toasts, úsalo; de lo contrario, créalo
                    if ($('#toast-container').length === 0) {
                        $('body').append('<div id="toast-container" class="position-fixed top-0 end-0 p-3" style="z-index: 1100;"></div>');
                    }

                    // Generar un ID único para el toast
                    const toastId = 'toast-' + Date.now();

                    // Definir la clase de estilo según el tipo de toast
                    let bgClass = 'bg-primary';
                    if (type === 'success') bgClass = 'bg-success';
                    if (type === 'error') bgClass = 'bg-danger';
                    if (type === 'warning') bgClass = 'bg-warning text-dark';

                    // Crear el HTML del toast
                    const toastHtml = `
                                <div id="${toastId}" class="toast align-items-center ${bgClass} text-white border-0" role="alert" aria-live="assertive" aria-atomic="true">
                                    <div class="d-flex">
                                        <div class="toast-body">
                                            <strong>${title}</strong>: ${message}
                                        </div>
                                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                                    </div>
                                </div>
                            `;

                    // Añadir el toast al contenedor
                    $('#toast-container').append(toastHtml);

                    // Inicializar y mostrar el toast
                    const toastElement = document.getElementById(toastId);
                    const toast = new bootstrap.Toast(toastElement, {
                        delay: 5000
                    });
                    toast.show();
                }
            });
        </script>
    }        

    <div class="d-flex align-items-center">
        <a href="@Url.Action("Index", "TerminosReferencia")" class="btn btn-outline-secondary" style="margin-right:15px;">
            <i class="fas fa-arrow-left me-2"></i> Volver al listado
        </a>
        @if (Model.TDR.CurrentStateID == 5) // Aprobado
        {
            <!-- Este botón debe estar en la sección de botones de acción de la vista Editar.cshtml -->
            <a href="@Url.Action("DescargarPDF", "TerminosReferencia", new { id = Model.TDR.TDRID })" class="btn btn-success">
                <i class="fas fa-file-pdf me-1"></i> Exportar a PDF
            </a>
        }
    </div>
</div>

<br>

<!-- Información de la versión -->
<div class="card shadow mb-4">
    <div class="card-header py-3 bg-white">
        <h6 class="m-0 font-weight-bold" style="color: #2a3c7d;">Información de la Versión</h6>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-3">
                <p><strong>Estado:</strong> @version.GetProperty("StateName").GetString()</p>
            </div>
            <div class="col-md-3">
                <p><strong>Creado por:</strong> @version.GetProperty("CreatedByUserName").GetString()</p>
            </div>
            <div class="col-md-3">
                <p><strong>Fecha creación:</strong> @DateTime.Parse(version.GetProperty("CreatedAt").GetString()).ToString("dd/MM/yyyy HH:mm")</p>
            </div>
        </div>
    </div>
</div>

@if (!canEdit)
{
    <div class="alert alert-warning mb-4">
        <i class="fas fa-exclamation-triangle me-2"></i>
        No es posible editar este TDR porque se encuentra en estado <strong>@Model.TDR.CurrentStateName</strong>.
    </div>
}

<!-- Formulario para guardar los cambios -->
<form id="formEditar" method="post" action="@Url.Action("Guardar", "TerminosReferencia", new { id = Model.TDR.TDRID })">

    <!-- Pestañas de navegación -->
    <ul class="nav nav-tabs mb-4" id="tdrTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="tab-info" data-bs-toggle="tab" data-bs-target="#pane-info"
                    type="button" role="tab" aria-controls="pane-info" aria-selected="true"
                    style="color: #2a3c7d;">
                <i class="fas fa-info-circle me-1"></i> Información General
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="tab-descripcion" data-bs-toggle="tab" data-bs-target="#pane-descripcion"
                    type="button" role="tab" aria-controls="pane-descripcion" aria-selected="false"
                    style="color: #495057;">
                <i class="fas fa-box me-1"></i> Descripción del Bien
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="tab-alcances" data-bs-toggle="tab" data-bs-target="#pane-alcances"
                    type="button" role="tab" aria-controls="pane-alcances" aria-selected="false"
                    style="color: #495057;">
                <i class="fas fa-tasks me-1"></i> Alcances
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="tab-requisitos" data-bs-toggle="tab" data-bs-target="#pane-requisitos"
                    type="button" role="tab" aria-controls="pane-requisitos" aria-selected="false"
                    style="color: #495057;">
                <i class="fas fa-clipboard-check me-1"></i> Requisitos
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="tab-plazos" data-bs-toggle="tab" data-bs-target="#pane-plazos"
                    type="button" role="tab" aria-controls="pane-plazos" aria-selected="false"
                    style="color: #495057;">
                <i class="fas fa-calendar-alt me-1"></i> Plazos y Entregables
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="tab-condiciones" data-bs-toggle="tab" data-bs-target="#pane-condiciones"
                    type="button" role="tab" aria-controls="pane-condiciones" aria-selected="false"
                    style="color: #495057;">
                <i class="fas fa-file-contract me-1"></i> Condiciones
            </button>
        </li>
    </ul>

    <!-- Contenido de las pestañas -->
    <div class="tab-content" id="tdrTabsContent">

        <!-- Pestaña INFORMACIÓN GENERAL -->
        <div class="tab-pane fade show active" id="pane-info" role="tabpanel" aria-labelledby="tab-info">
            @foreach (var fieldElement in fields.EnumerateArray())
            {
                string fieldName = fieldElement.GetProperty("FieldName").GetString();
                string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                string fieldComment = fieldElement.GetProperty("comment").GetString();

                if (infoGeneralFields.Contains(fieldName))
                {
                    <div class="card shadow-sm mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                        </div>
                        <div class="card-body">
                            @* Insertar instrucciones del campo si existen *@
                            @if (instruccionesCampos.ContainsKey(fieldName))
                            {
                                <div class="campo-instruccion">
                                    <p>@instruccionesCampos[fieldName]</p>
                                </div>
                            }

                            <div class="mb-3">
                                @if (fieldName == "organoUnidadOrganicaEETT")
                                {
                                    @if (canEdit)
                                    {
                                        <select class="form-select campo-select" id="select_@fieldName" onchange="$('#field_@fieldName').val(this.value)">
                                            <option value="">Seleccione...</option>
                                            <option value="OFICINA DE INTEGRIDAD Y CUMPLIMIENTO DE LA GERENCIA GENERAL">OFICINA DE INTEGRIDAD Y CUMPLIMIENTO DE LA GERENCIA GENERAL</option>
                                            <option value="DEPARTAMENTO DE CONTROL DE GESTIÓN DE LA GERENCIA DE PLANEAMIENTO Y CONTROL DE GESTIÓN">DEPARTAMENTO DE CONTROL DE GESTIÓN DE LA GERENCIA DE PLANEAMIENTO Y CONTROL DE GESTIÓN</option>
                                            <option value="DEPARTAMENTO DE EXCELENCIA OPERACIONAL DE LA GERENCIA DE PLANEAMIENTO Y CONTROL DE GESTIÓN">DEPARTAMENTO DE EXCELENCIA OPERACIONAL DE LA GERENCIA DE PLANEAMIENTO Y CONTROL DE GESTIÓN</option>
                                            <option value="DEPARTAMENTO DE SEGURIDAD Y MEDIO AMBIENTE DE LA GERENCIA DE PLANEAMIENTO Y CONTROL DE GESTIÓN">DEPARTAMENTO DE SEGURIDAD Y MEDIO AMBIENTE DE LA GERENCIA DE PLANEAMIENTO Y CONTROL DE GESTIÓN</option>
                                            <option value="DEPARTAMENTO DE FISCALIZACIÓN Y CALIDAD DE LA GERENCIA DE PLANEAMIENTO Y CONTROL DE GESTIÓN">DEPARTAMENTO DE FISCALIZACIÓN Y CALIDAD DE LA GERENCIA DE PLANEAMIENTO Y CONTROL DE GESTIÓN</option>
                                            <option value="SUB GERENCIA LEGAL DE LA GERENCIA GENERAL">SUB GERENCIA LEGAL DE LA GERENCIA GENERAL</option>
                                            <option value="OFICINA DE IMAGEN Y RESPONSABILIDAD SOCIAL DE LA GERENCIA GENERAL">OFICINA DE IMAGEN Y RESPONSABILIDAD SOCIAL DE LA GERENCIA GENERAL</option>
                                            <option value="DEPARTAMENTO DE GESTIÓN HUMANA DE LA GERENCIA DE ADMINISTRACIÓN Y FINANZAS">DEPARTAMENTO DE GESTIÓN HUMANA DE LA GERENCIA DE ADMINISTRACIÓN Y FINANZAS</option>
                                            <option value="DEPARTAMENTO DE ACTIVO FIJO DE LA GERENCIA DE ADMINISTRACIÓN Y FINANZAS">DEPARTAMENTO DE ACTIVO FIJO DE LA GERENCIA DE ADMINISTRACIÓN Y FINANZAS</option>
                                            <option value="DEPARTAMENTO DE CONTABILIDAD DE LA GERENCIA DE ADMINISTRACIÓN Y FINANZAS">DEPARTAMENTO DE CONTABILIDAD DE LA GERENCIA DE ADMINISTRACIÓN Y FINANZAS</option>
                                            <option value="DEPARTAMENTO DE LOGISTICA DE LA GERENCIA DE ADMINISTRACIÓN Y FINANZAS">DEPARTAMENTO DE LOGISTICA DE LA GERENCIA DE ADMINISTRACIÓN Y FINANZAS</option>
                                            <option value="DEPARTAMENTO DE INVESTIGACIÓN DE PROYECTOS DE LA GERENCIA DE PROYECTOS">DEPARTAMENTO DE INVESTIGACIÓN DE PROYECTOS DE LA GERENCIA DE PROYECTOS</option>
                                            <option value="DEPARTAMENTO DE DESARROLLO DE PROYECTOS DE LA GERENCIA DE PROYECTOS">DEPARTAMENTO DE DESARROLLO DE PROYECTOS DE LA GERENCIA DE PROYECTOS</option>
                                            <option value="DEPARTAMENTO DE PLANEAMIENTO ELÉCTRICO DE LA GERENCIA DE PROYECTOS">DEPARTAMENTO DE PLANEAMIENTO ELÉCTRICO DE LA GERENCIA DE PROYECTOS</option>
                                            <option value="SUB GERENCIA DE TECNOLOGÍAS DE INFORMACIÓN Y COMUNICACIONES DE LA GERENCIA GENERAL">SUB GERENCIA DE TECNOLOGÍAS DE INFORMACIÓN Y COMUNICACIONES DE LA GERENCIA GENERAL</option>
                                            <option value="DEPARTAMENTO DE CLIENTES LIBRES Y MAYORES DE LA GERENCIA COMERCIAL">DEPARTAMENTO DE CLIENTES LIBRES Y MAYORES DE LA GERENCIA COMERCIAL</option>
                                            <option value="DEPARTAMENTO DE ATENCIÓN AL CLIENTE DE LA GERENCIA COMERCIAL">DEPARTAMENTO DE ATENCIÓN AL CLIENTE DE LA GERENCIA COMERCIAL</option>
                                            <option value="DEPARTAMENTO DE PROGRAMACIÓN DE CONEXIONES DE LA GERENCIA COMERCIAL">DEPARTAMENTO DE PROGRAMACIÓN DE CONEXIONES DE LA GERENCIA COMERCIAL</option>
                                            <option value="DEPARTAMENTO DE OPERACIONES COMERCIALES DE LA GERENCIA COMERCIAL">DEPARTAMENTO DE OPERACIONES COMERCIALES DE LA GERENCIA COMERCIAL</option>
                                            <option value="DEPARTAMENTO DE OPERACIONES Y TRANSMISIÓN DE LA GERENCIA TÉCNICA">DEPARTAMENTO DE OPERACIONES Y TRANSMISIÓN DE LA GERENCIA TÉCNICA</option>
                                            <option value="DEPARTAMENTO DE MANTENIMIENTO DE LA GERENCIA TÉCNICA">DEPARTAMENTO DE MANTENIMIENTO DE LA GERENCIA TÉCNICA</option>
                                            <option value="DEPARTAMENTO COMERCIAL ZONAL TACNA DE LA GERENCIA ZONAL TACNA">DEPARTAMENTO COMERCIAL ZONAL TACNA DE LA GERENCIA ZONAL TACNA</option>
                                            <option value="DEPARTAMENTO DE OPERACIONES ZONAL TACNA DE LA GERENCIA ZONAL TACNA">DEPARTAMENTO DE OPERACIONES ZONAL TACNA DE LA GERENCIA ZONAL TACNA</option>
                                            <option value="DEPARTAMENTO DE ADMINISTRACIÓN ZONAL MOQUEGUA DE LA GERENCIA ZONAL MOQUEGUA">DEPARTAMENTO DE ADMINISTRACIÓN ZONAL MOQUEGUA DE LA GERENCIA ZONAL MOQUEGUA</option>
                                            <option value="DEPARTAMENTO COMERCIAL ZONAL MOQUEGUA DE LA GERENCIA ZONAL MOQUEGUA">DEPARTAMENTO COMERCIAL ZONAL MOQUEGUA DE LA GERENCIA ZONAL MOQUEGUA</option>
                                            <option value="DEPARTAMENTO DE OPERACIONES ZONAL MOQUEGUA DE LA GERENCIA ZONAL MOQUEGUA">DEPARTAMENTO DE OPERACIONES ZONAL MOQUEGUA DE LA GERENCIA ZONAL MOQUEGUA</option>
                                            <option value="DEPARTAMENTO DE ADMINISTRACIÓN ZONAL ILO DE LA GERENCIA ZONAL ILO">DEPARTAMENTO DE ADMINISTRACIÓN ZONAL ILO DE LA GERENCIA ZONAL ILO</option>
                                            <option value="DEPARTAMENTO DE COMERCIAL ZONAL ILO DE LA GERENCIA ZONAL ILO">DEPARTAMENTO DE COMERCIAL ZONAL ILO DE LA GERENCIA ZONAL ILO</option>
                                            <option value="DEPARTAMENTO DE OPERACIONES ZONAL ILO DE LA GERENCIA ZONAL ILO">DEPARTAMENTO DE OPERACIONES ZONAL ILO DE LA GERENCIA ZONAL ILO</option>
                                        </select>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <input type="text" class="form-control" value="@fieldContent" readonly>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                }
                                else if (textareaFields.Contains(fieldName))
                                {
                                    <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                }
                                else
                                {
                                    <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                    <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                }
                            </div>

                            <!-- Campo de observaciones -->
                            <div class="mt-3">
                                @if (isAdmin && canEdit)
                                {
                                    <label class="form-label">Observaciones</label>
                                    <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(fieldComment))
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <div class="observacion-destacada">
                                            <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                        </div>
                                    }
                                    else
                                    {
                                        <label class="form-label">Sin Observaciones</label>
                                        <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Pestaña DESCRIPCIÓN DEL BIEN -->
        <div class="tab-pane fade" id="pane-descripcion" role="tabpanel" aria-labelledby="tab-descripcion">
            @foreach (var fieldElement in fields.EnumerateArray())
            {
                string fieldName = fieldElement.GetProperty("FieldName").GetString();
                string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                string fieldComment = fieldElement.GetProperty("comment").GetString();

                if (descripcionBienFields.Contains(fieldName))
                {
                    <div class="card shadow-sm mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                        </div>
                        <div class="card-body">
                            @* Insertar instrucciones del campo si existen *@
                            @if (instruccionesCampos.ContainsKey(fieldName))
                            {
                                <div class="campo-instruccion">
                                    <p>@instruccionesCampos[fieldName]</p>
                                </div>
                            }

                            <div class="mb-3">
                                @if (textareaFields.Contains(fieldName))
                                {
                                    <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                }
                                else
                                {
                                    <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                    <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                }
                            </div>

                            <!-- Campo de observaciones -->
                            <div class="mt-3">
                                @if (isAdmin && canEdit)
                                {
                                    <label class="form-label">Observaciones</label>
                                    <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(fieldComment))
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <div class="observacion-destacada">
                                            <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                        </div>
                                    }
                                    else
                                    {
                                        <label class="form-label">Sin Observaciones</label>
                                        <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Pestaña ALCANCES -->
        <div class="tab-pane fade" id="pane-alcances" role="tabpanel" aria-labelledby="tab-alcances">
            @foreach (var fieldElement in fields.EnumerateArray())
            {
                string fieldName = fieldElement.GetProperty("FieldName").GetString();
                string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                string fieldComment = fieldElement.GetProperty("comment").GetString();

                if (alcancesFields.Contains(fieldName))
                {
                    <div class="card shadow-sm mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                        </div>
                        <div class="card-body">
                            @* Insertar instrucciones del campo si existen *@
                            @if (instruccionesCampos.ContainsKey(fieldName))
                            {
                                <div class="campo-instruccion">
                                    <p>@instruccionesCampos[fieldName]</p>
                                </div>
                            }

                            <div class="mb-3">
                                @if (textareaFields.Contains(fieldName))
                                {
                                    <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                }
                                else
                                {
                                    <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                    <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                }
                            </div>

                            <!-- Campo de observaciones -->
                            <div class="mt-3">
                                @if (isAdmin && canEdit)
                                {
                                    <label class="form-label">Observaciones</label>
                                    <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(fieldComment))
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <div class="observacion-destacada">
                                            <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                        </div>
                                    }
                                    else
                                    {
                                        <label class="form-label">Sin Observaciones</label>
                                        <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Pestaña REQUISITOS -->
        <div class="tab-pane fade" id="pane-requisitos" role="tabpanel" aria-labelledby="tab-requisitos">
            @foreach (var fieldElement in fields.EnumerateArray())
            {
                string fieldName = fieldElement.GetProperty("FieldName").GetString();
                string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                string fieldComment = fieldElement.GetProperty("comment").GetString();

                if (requisitosFields.Contains(fieldName))
                {
                    <div class="card shadow-sm mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                        </div>
                        <div class="card-body">
                            @* Insertar instrucciones del campo si existen *@
                            @if (instruccionesCampos.ContainsKey(fieldName))
                            {
                                <div class="campo-instruccion">
                                    <p>@instruccionesCampos[fieldName]</p>
                                </div>
                            }

                            <div class="mb-3">
                                @if (textareaFields.Contains(fieldName))
                                {
                                    <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                }
                                else
                                {
                                    <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                    <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                }
                            </div>

                            <!-- Campo de observaciones -->
                            <div class="mt-3">
                                @if (isAdmin && canEdit)
                                {
                                    <label class="form-label">Observaciones</label>
                                    <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(fieldComment))
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <div class="observacion-destacada">
                                            <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                        </div>
                                    }
                                    else
                                    {
                                        <label class="form-label">Sin Observaciones</label>
                                        <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

            <!-- Pestaña PLAZOS Y ENTREGABLES -->
            <div class="tab-pane fade" id="pane-plazos" role="tabpanel" aria-labelledby="tab-plazos">
                @foreach (var fieldElement in fields.EnumerateArray())
                {
                    string fieldName = fieldElement.GetProperty("FieldName").GetString();
                    string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                    string fieldComment = fieldElement.GetProperty("comment").GetString();

                    if (plazoEntregaFields.Contains(fieldName))
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                            </div>
                            <div class="card-body">
                                @* Insertar instrucciones del campo si existen *@
                                @if (instruccionesCampos.ContainsKey(fieldName))
                                {
                                    <div class="campo-instruccion">
                                        <p>@instruccionesCampos[fieldName]</p>
                                    </div>
                                }

                                <div class="mb-3">
                                    @if (textareaFields.Contains(fieldName))
                                    {
                                        <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                </div>

                                <!-- Campo de observaciones -->
                                <div class="mt-3">
                                    @if (isAdmin && canEdit)
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                    }
                                    else
                                    {
                                        @if (!string.IsNullOrEmpty(fieldComment))
                                        {
                                            <label class="form-label">Observaciones</label>
                                            <div class="observacion-destacada">
                                                <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                            </div>
                                        }
                                        else
                                        {
                                            <label class="form-label">Sin Observaciones</label>
                                            <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Pestaña CONDICIONES -->
            <div class="tab-pane fade" id="pane-condiciones" role="tabpanel" aria-labelledby="tab-condiciones">
                @foreach (var fieldElement in fields.EnumerateArray())
                {
                    string fieldName = fieldElement.GetProperty("FieldName").GetString();
                    string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                    string fieldComment = fieldElement.GetProperty("comment").GetString();

                    @if (fieldName == "formaCondicionesPagoEETT")
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                            </div>
                            <div class="card-body">
                                @* Insertar instrucciones del campo si existen *@
                                @if (instruccionesCampos.ContainsKey(fieldName))
                                {
                                    <div class="campo-instruccion">
                                        <p>@instruccionesCampos[fieldName]</p>
                                    </div>
                                }

                                <div class="mb-3">
                                    @if (canEdit)
                                    {
                                        <select class="form-select campo-select" id="select_@fieldName" onchange="$('#field_@fieldName').val(this.value)">
                                            <option value="">Seleccione...</option>
                                            <option value="Única">Única</option>
                                            <option value="Parcial">Parcial</option>
                                        </select>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <input type="text" class="form-control" value="@fieldContent" readonly>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                </div>

                                <!-- Campo de observaciones -->
                                <div class="mt-3">
                                    @if (isAdmin && canEdit)
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                    }
                                    else
                                    {
                                        @if (!string.IsNullOrEmpty(fieldComment))
                                        {
                                            <label class="form-label">Observaciones</label>
                                            <div class="observacion-destacada">
                                                <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                            </div>
                                        }
                                        else
                                        {
                                            <label class="form-label">Sin Observaciones</label>
                                            <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else if (fieldName == "medidasSeguridadEETT")
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                            </div>
                            <div class="card-body">
                                @* Insertar instrucciones del campo si existen *@
                                @if (instruccionesCampos.ContainsKey(fieldName))
                                {
                                    <div class="campo-instruccion">
                                        <p>@instruccionesCampos[fieldName]</p>
                                    </div>
                                }

                                <div class="mb-3">
                                    @if (canEdit)
                                    {
                                        <select class="form-select campo-select" id="select_@fieldName" onchange="$('#field_@fieldName').val(this.value)">
                                            <option value="">Seleccione...</option>
                                            <option value="Alto Riesgo">Alto Riesgo</option>
                                            <option value="Bajo Riesgo">Bajo Riesgo</option>
                                            <option value="No Corresponde">No Corresponde</option>
                                        </select>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <input type="text" class="form-control" value="@fieldContent" readonly>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                </div>

                                <!-- Campo de observaciones -->
                                <div class="mt-3">
                                    @if (isAdmin && canEdit)
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                    }
                                    else
                                    {
                                        @if (!string.IsNullOrEmpty(fieldComment))
                                        {
                                            <label class="form-label">Observaciones</label>
                                            <div class="observacion-destacada">
                                                <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                            </div>
                                        }
                                        else
                                        {
                                            <label class="form-label">Sin Observaciones</label>
                                            <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else if (fieldName == "sistemaContratacionEETT")
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                            </div>
                            <div class="card-body">
                                @* Insertar instrucciones del campo si existen *@
                                @if (instruccionesCampos.ContainsKey(fieldName))
                                {
                                    <div class="campo-instruccion">
                                        <p>@instruccionesCampos[fieldName]</p>
                                    </div>
                                }

                                <div class="mb-3">
                                    @if (canEdit)
                                    {
                                        <select class="form-select campo-select" id="select_@fieldName" onchange="$('#field_@fieldName').val(this.value)">
                                            <option value="">Seleccione...</option>
                                            <option value="Suma Alzada">Suma Alzada</option>
                                            <option value="Precios Unitarios">Precios Unitarios</option>
                                        </select>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <input type="text" class="form-control" value="@fieldContent" readonly>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                </div>

                                <!-- Campo de observaciones -->
                                <div class="mt-3">
                                    @if (isAdmin && canEdit)
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                    }
                                    else
                                    {
                                        @if (!string.IsNullOrEmpty(fieldComment))
                                        {
                                            <label class="form-label">Observaciones</label>
                                            <div class="observacion-destacada">
                                                <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                            </div>
                                        }
                                        else
                                        {
                                            <label class="form-label">Sin Observaciones</label>
                                            <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        if (condicionesFields.Contains(fieldName))
                        {
                            <div class="card shadow-sm mb-3">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                                </div>
                                <div class="card-body">
                                    @* Insertar instrucciones del campo si existen *@
                                    @if (instruccionesCampos.ContainsKey(fieldName))
                                    {
                                        <div class="campo-instruccion">
                                            <p>@instruccionesCampos[fieldName]</p>
                                        </div>
                                    }

                                    <div class="mb-3">
                                        @if (textareaFields.Contains(fieldName))
                                        {
                                            <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                        }
                                        else
                                        {
                                            <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                            <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                        }
                                    </div>

                                    <!-- Campo de observaciones -->
                                    <div class="mt-3">
                                        @if (isAdmin && canEdit)
                                        {
                                            <label class="form-label">Observaciones</label>
                                            <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                        }
                                        else
                                        {
                                            @if (!string.IsNullOrEmpty(fieldComment))
                                            {
                                                <label class="form-label">Observaciones</label>
                                                <div class="observacion-destacada">
                                                    <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                                </div>
                                            }
                                            else
                                            {
                                                <label class="form-label">Sin Observaciones</label>
                                                <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
            </div>

        </div>

        <!-- Botones de acción -->
        <div class="d-flex justify-content-between mt-4 mb-5">
            <a href="@Url.Action("Index", "TerminosReferencia")" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i> Volver al listado
            </a>

            @if (canEdit)
            {
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save me-1"></i> Guardar Cambios
                </button>
            }
        </div>
</form>


<!-- Panel de Acciones según el estado -->
<div class="card shadow mb-4">
    <div class="card-header py-3 bg-white">
        <h6 class="m-0 font-weight-bold" style="color: #2a3c7d;">Acciones</h6>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                @if (isAdmin) // Administrador
                {
                    <div class="d-flex gap-2">
                        @if (Model.TDR.CurrentStateID == 1) // Borrador
                        {
                            <button type="button" class="btn btn-primary" id="btnEnviarRevision">
                                <i class="fas fa-paper-plane me-2"></i>Enviar para Revisión
                            </button>
                        }
                        @if (Model.TDR.CurrentStateID == 2 || Model.TDR.CurrentStateID == 4) // Pendiente de Revisión o Pendiente de Revisión Corregida
                        {
                            <button type="button" class="btn btn-warning" id="btnObservarTDR">
                                <i class="fas fa-exclamation-triangle me-2"></i>Observar TDR
                            </button>
                            <button type="button" class="btn btn-success" id="btnAprobarTDR">
                                <i class="fas fa-check-circle me-2"></i>Aprobar TDR
                            </button>
                        }
                        @if (Model.TDR.CurrentStateID == 3) // Observado
                        {
                            <div class="alert alert-info mb-0">
                                <i class="fas fa-info-circle me-2"></i>
                                El TDR está observado. A la espera de las correcciones enviadas por el usuario.
                            </div>
                        }
                        @if (Model.TDR.CurrentStateID == 5) // Aprobado
                        {
                            <div class="alert alert-success mb-0">
                                <i class="fas fa-check-circle me-2"></i>
                                El TDR ha sido aprobado. Ya no se pueden realizar modificaciones.
                            </div>
                        }
                        @if (Model.TDR.CurrentStateID == 6) // Anulado
                        {
                            <div class="alert alert-dark mb-0">
                                <i class="fas fa-ban me-2"></i>
                                El TDR ha sido anulado. Ya no se pueden realizar modificaciones.
                            </div>
                        }
                    </div>
                }
                else // Usuario estándar
                {
                    <div class="d-flex gap-2">
                        @if (Model.TDR.CurrentStateID == 1) // Borrador
                        {
                            <button type="button" class="btn btn-primary" id="btnEnviarRevision">
                                <i class="fas fa-paper-plane me-2"></i>Enviar para Revisión
                            </button>
                        }
                        @if (Model.TDR.CurrentStateID == 3) // Observado
                        {
                            <button type="button" class="btn btn-primary" id="btnEnviarCorreccion">
                                <i class="fas fa-paper-plane me-2"></i>Enviar Corrección
                            </button>
                        }
                        @if (Model.TDR.CurrentStateID == 2 || Model.TDR.CurrentStateID == 4) // Pendiente de Revisión o Pendiente de Revisión Corregida
                        {
                            <div class="alert alert-warning mb-0">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                El TDR está pendiente de revisión. No se pueden realizar modificaciones hasta que sea observado o aprobado.
                            </div>
                        }
                        @if (Model.TDR.CurrentStateID == 5) // Aprobado
                        {
                            <div class="alert alert-success mb-0">
                                <i class="fas fa-check-circle me-2"></i>
                                El TDR ha sido aprobado. Ya no se pueden realizar modificaciones.
                            </div>
                        }
                        @if (Model.TDR.CurrentStateID == 6) // Anulado
                        {
                            <div class="alert alert-dark mb-0">
                                <i class="fas fa-ban me-2"></i>
                                El TDR ha sido anulado. Ya no se pueden realizar modificaciones.
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal para Observar TDR -->
<div class="modal fade" id="modalObservarTDR" tabindex="-1" aria-labelledby="modalObservarTDRLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="modalObservarTDRLabel">Observar TDR</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>El TDR será marcado como <strong>Observado</strong>.</p>
                <div class="mb-3" style="display:none;">
                    <textarea class="form-control" id="observacionMotivo" rows="3">Motivo por defecto para observación</textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-warning" id="btnConfirmarObservar">Confirmar Observación</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Aprobar TDR -->
<div class="modal fade" id="modalAprobarTDR" tabindex="-1" aria-labelledby="modalAprobarTDRLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="modalAprobarTDRLabel">Aprobar TDR</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>El TDR será marcado como <strong>Aprobado</strong>. Esta acción finaliza el proceso de revisión del documento.</p>
                <div class="mb-3" style="display:none;">
                    <textarea class="form-control" id="aprobacionMotivo" rows="3">Aprobado sin comentarios</textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-success" id="btnConfirmarAprobar">Confirmar Aprobación</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal para Enviar a Revisión -->
<div class="modal fade" id="modalEnviarRevision" tabindex="-1" aria-labelledby="modalEnviarRevisionLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #2a3c7d; color: white;">
                <h5 class="modal-title" id="modalEnviarRevisionLabel">Enviar TDR para Revisión</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>El TDR será enviado para revisión por parte del administrador. ¿Está seguro de continuar?</p>
                <p class="text-muted">No podrá realizar modificaciones hasta que sea observado o aprobado.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btnConfirmarEnviar">Enviar para Revisión</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Enviar Corrección -->
<div class="modal fade" id="modalEnviarCorreccion" tabindex="-1" aria-labelledby="modalEnviarCorreccionLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #2a3c7d; color: white;">
                <h5 class="modal-title" id="modalEnviarCorreccionLabel">Enviar Corrección del TDR</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Ha realizado correcciones al TDR observado. ¿Desea enviar estas correcciones para una nueva revisión?</p>
                <p class="text-muted">No podrá realizar modificaciones hasta que sea observado o aprobado.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btnConfirmarCorreccion">Enviar Corrección</button>
            </div>
        </div>
    </div>
</div>