@model TRElectrosur.Models.TDREditViewModel
@{
    ViewData["Title"] = "Visualizar Término de Referencia";

    // Deserializar los datos JSON en la vista
    var fieldsData = System.Text.Json.JsonDocument.Parse(Model.RawFieldsData);
    var version = fieldsData.RootElement.GetProperty("version");
    var fields = fieldsData.RootElement.GetProperty("fields");

    // Determinar si el usuario es administrador
    bool isAdmin = Model.UserRoleId == 1;

    // Determinar si puede editar según el rol y estado del TDR
    bool canEdit = true;

    // Si el TDR está anulado, nadie puede editar
    if (Model.TDR.CurrentStateID == 6) // Anulado
    {
        canEdit = false;
    }
    // Si es usuario estándar y el TDR está en estado Pendiente de Revisión o Aprobado, no puede editar
    else if (!isAdmin && (Model.TDR.CurrentStateID == 2 || Model.TDR.CurrentStateID == 4 || Model.TDR.CurrentStateID == 5))
    {
        canEdit = false;
    }

    // Listas de categorías de campos para organizar la visualización
    var infoGeneralFields = new List<string> { "organoUnidadOrganica", "actividadPoiAccionEstrategica", "denominacionContratacion", "finalidadPublica", "objetivoContratacion" };
    var alcancesFields = new List<string> { "alcancesServicio", "reglamentos", "seguros", "prestacionesAccesorias" };
    var requisitosFields = new List<string> { "requisitosProveedor", "experienciaProveedor", "perfilPersonal", "formacionAcademica", "experienciaPersonalClave", "capacitacion", "otros" };
    var plazosFields = new List<string> { "lugar", "plazo", "entregables", "plazoLugar", "conformidad" };
    var condicionesFields = new List<string> { "sistemaContratacion", "formaCondicionesPago", "responsabilidad", "otrasPenalidades", "medidasSeguridad", "clausula", "anexos" };

    // Diccionario para convertir nombres de campo técnicos a nombres amigables
    var friendlyNames = new Dictionary<string, string>
    {
        { "organoUnidadOrganica", "Órgano y/o Unidad Orgánica" },
        { "actividadPoiAccionEstrategica", "Actividad POI / Acción Estratégica" },
        { "denominacionContratacion", "Denominación de la Contratación" },
        { "finalidadPublica", "Finalidad Pública" },
        { "objetivoContratacion", "Objetivo de la Contratación" },
        { "alcancesServicio", "Alcances del Servicio" },
        { "reglamentos", "Reglamentos Técnicos y Normas" },
        { "seguros", "Seguros" },
        { "prestacionesAccesorias", "Prestaciones Accesorias" },
        { "requisitosProveedor", "Requisitos del Proveedor" },
        { "experienciaProveedor", "Experiencia del Proveedor" },
        { "perfilPersonal", "Perfil del Personal" },
        { "formacionAcademica", "Formación Académica" },
        { "experienciaPersonalClave", "Experiencia del Personal Clave" },
        { "capacitacion", "Capacitación" },
        { "otros", "Otros Requisitos" },
        { "lugar", "Lugar de Ejecución" },
        { "plazo", "Plazo de Ejecución" },
        { "entregables", "Entregables" },
        { "plazoLugar", "Plazo y Lugar de Presentación" },
        { "conformidad", "Conformidad" },
        { "sistemaContratacion", "Sistema de Contratación" },
        { "formaCondicionesPago", "Forma y Condiciones de Pago" },
        { "responsabilidad", "Responsabilidad del Proveedor" },
        { "otrasPenalidades", "Otras Penalidades" },
        { "medidasSeguridad", "Medidas de Seguridad" },
        { "clausula", "Cláusulas" },
        { "anexos", "Anexos" }
    };

    // Lista de campos que deben usar textarea en lugar de editor HTML
    var textareaFields = new List<string> { "organoUnidadOrganica", "actividadPoiAccionEstrategica", "denominacionContratacion", "finalidadPublica" };
}

<div class="container-fluid px-0">
    <!-- Cabecera de la página -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">@Model.TDR.Title</h1>
            <p class="mb-0 text-muted">
                <span class="fw-bold">ID:</span> @Model.TDR.TDRID |
                <span class="fw-bold">Tipo:</span> @Model.TDR.TDRTypeName |
                <span class="fw-bold">Estado:</span>
                @{
                    string badgeClass = "bg-secondary";

                    switch (Model.TDR.CurrentStateID)
                    {
                        case 1: // Borrador
                            badgeClass = "bg-info";
                            break;
                        case 2: // Pendiente de Revisión
                        case 4: // Pendiente de Revisión Corregida
                            badgeClass = "bg-warning text-dark";
                            break;
                        case 3: // Observado
                            badgeClass = "bg-danger";
                            break;
                        case 5: // Aprobado
                            badgeClass = "bg-success";
                            break;
                        case 6: // Anulado
                            badgeClass = "bg-dark";
                            break;
                    }
                }
                <span class="badge @badgeClass">@Model.TDR.CurrentStateName</span>
            </p>
        </div>
    </div>

    <style>

        /* Destacar las observaciones para usuarios */
        .observacion-destacada {
            background-color: #FFF0F0;
            border-left: 4px solid #dc3545;
            padding: 10px 15px;
            border-radius: 0.25rem;
            margin-top: 8px;
            font-style: italic;
            color: #842029;
        }

        .nav-tabs .nav-link {
            border-top-left-radius: 0.5rem;
            border-top-right-radius: 0.5rem;
        }

            .nav-tabs .nav-link.active {
                border-color: #dee2e6 #dee2e6 #fff;
                font-weight: 600;
            }

        .card-header h6 {
            margin-bottom: 0;
            font-size: 1rem;
            font-weight: 500;
        }

        .badge {
            font-size: 0.8rem;
            padding: 0.35em 0.65em;
        }

        .form-label {
            font-size: 0.875rem;
            color: #6c757d;
        }

        /* Estilos para el editor HTML */
        .html-editor {
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            padding: 0.5rem;
            min-height: 150px;
            background-color: white;
        }
    </style>

    @section Scripts {
        <!-- CKEditor 5 para editores HTML -->
        <script src="https://cdn.ckeditor.com/ckeditor5/37.1.0/classic/ckeditor.js"></script>

        <script>



                // Versión alternativa más específica
                function initCustomSelects() {
                    // Procesar formaCondicionesPago
                    var formaPagoSelect = $('#select_formaCondicionesPago');
                    var formaPagoValue = $('#field_formaCondicionesPago').val().trim().toLowerCase();

                    if (formaPagoValue.includes('única') || formaPagoValue.includes('unica')) {
                        formaPagoSelect.val('Única');
                    } else if (formaPagoValue.includes('mensual')) {
                        formaPagoSelect.val('Mensual');
                    } else if (formaPagoValue.includes('entregables')) {
                        formaPagoSelect.val('Por Entregables');
                    }

                    // Procesar medidasSeguridad
                    var seguridadSelect = $('#select_medidasSeguridad');
                    var seguridadValue = $('#field_medidasSeguridad').val().trim().toLowerCase();

                    if (seguridadValue.includes('alto riesgo')) {
                        seguridadSelect.val('Alto Riesgo');
                    } else if (seguridadValue.includes('bajo riesgo')) {
                        seguridadSelect.val('Bajo Riesgo');
                    } else if (seguridadValue.includes('no corresponde')) {
                        seguridadSelect.val('No Corresponde');
                    }

                    console.log('Valor de formaCondicionesPago:', formaPagoValue, '→ Seleccionado:', formaPagoSelect.val());
                    console.log('Valor de medidasSeguridad:', seguridadValue, '→ Seleccionado:', seguridadSelect.val());
                }


            $(document).ready(function () {

                initCustomSelects();

                // Colorear las pestañas al hacer clic
                $('button[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
                    // Quitar el color azul de todas las pestañas
                    $('button[data-bs-toggle="tab"]').css('color', '#495057');
                    // Aplicar color azul a la pestaña activa
                    $(this).css('color', '#2a3c7d');
                });

                // Inicializar editores HTML
                $('.html-editor').each(function () {
                    const editorId = $(this).attr('id');
                    const fieldId = editorId.replace('editor_', 'field_');
                    const isReadOnly = $(this).attr('data-readonly') === 'true';

                    ClassicEditor
                        .create(document.getElementById(editorId), {
                            toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'insertTable', 'undo', 'redo']
                        })
                        .then(editor => {
                            // Hacer el editor de solo lectura si es necesario
                            if (isReadOnly) {
                                editor.isReadOnly = true;
                            }

                            // Actualizar el textarea oculto cuando cambia el contenido
                            editor.model.document.on('change:data', () => {
                                document.getElementById(fieldId).value = editor.getData();
                            });
                        })
                        .catch(error => {
                            console.error(error);
                        });
                });

                // Proceso antes de enviar el formulario para asegurar que todos los datos estén en sus textareas correspondientes
                $('#formEditar').on('submit', function (e) {
                    // No hay necesidad de prevenir el submit por defecto, queremos que el formulario se envíe normalmente
                });

                // ====================================
                // Gestión de estados del TDR
                // ====================================
                const tdrId = @Model.TDR.TDRID;

                // Botones para abrir modales
                $('#btnObservarTDR').on('click', function () {
                    $('#modalObservarTDR').modal('show');
                });

                $('#btnAprobarTDR').on('click', function () {
                    $('#modalAprobarTDR').modal('show');
                });

                $('#btnEnviarRevision').on('click', function () {
                    $('#modalEnviarRevision').modal('show');
                });

                $('#btnEnviarCorreccion').on('click', function () {
                    $('#modalEnviarCorreccion').modal('show');
                });

                // Botones de confirmación
                $('#btnConfirmarObservar').on('click', function () {
                    const reason = $('#observacionMotivo').val().trim();
                    if (!reason) {
                        alert('Por favor, ingrese el motivo de la observación');
                        return;
                    }

                    cambiarEstado(tdrId, 3, reason) // 3 = Observado
                        .then(success => {
                            if (success) {
                                $('#modalObservarTDR').modal('hide');

                                // Después de cambiar el estado a Observado, crear nueva versión
                                crearNuevaVersion(tdrId)
                                    .then(success => {
                                        if (success) {
                                            showToast('Éxito', 'TDR marcado como observado y nueva versión creada', 'success');
                                            setTimeout(() => { location.reload(); }, 1500);
                                        }
                                    });
                            }
                        });
                });

                $('#btnConfirmarAprobar').on('click', function () {
                    const reason = $('#aprobacionMotivo').val().trim() || 'Aprobado por el administrador';

                    cambiarEstado(tdrId, 5, reason) // 5 = Aprobado
                        .then(success => {
                            if (success) {
                                $('#modalAprobarTDR').modal('hide');
                                showToast('Éxito', 'TDR aprobado correctamente', 'success');
                                setTimeout(() => { location.reload(); }, 1500);
                            }
                        });
                });

                $('#btnConfirmarEnviar').on('click', function () {
                    cambiarEstado(tdrId, 2, 'Enviado para revisión') // 2 = Pendiente de Revisión
                        .then(success => {
                            if (success) {
                                $('#modalEnviarRevision').modal('hide');
                                showToast('Éxito', 'TDR enviado para revisión', 'success');
                                setTimeout(() => { location.reload(); }, 1500);
                            }
                        });
                });

                $('#btnConfirmarCorreccion').on('click', function () {
                    cambiarEstado(tdrId, 2, 'Correcciones enviadas para revisión') // 4 = Pendiente de Revisión Corregida
                        .then(success => {
                            if (success) {
                                $('#modalEnviarCorreccion').modal('hide');
                                showToast('Éxito', 'Correcciones enviadas para revisión', 'success');
                                setTimeout(() => { location.reload(); }, 1500);
                            }
                        });
                });

                // Función para cambiar el estado del TDR
                async function cambiarEstado(id, newStateId, reason) {
                    try {
                        const response = await $.ajax({
                            url: `/TerminosReferencia/CambiarEstado?id=${id}&newStateId=${newStateId}&reason=${encodeURIComponent(reason)}`,
                            type: 'POST',
                            dataType: 'json' // Asegúrate de que espera una respuesta JSON
                        });

                        if (response.success) {
                            // Usar la URL de redirección proporcionada por el servidor
                            window.location.href = response.redirectUrl;
                            return true;
                        } else {
                            showToast('Error', response.message || 'No se pudo cambiar el estado del TDR', 'error');
                            return false;
                        }
                    } catch (error) {
                        console.error('Error al cambiar estado:', error);
                        showToast('Error', 'No se pudo cambiar el estado del TDR', 'error');
                        return false;
                    }
                }

                // Función para crear una nueva versión del TDR
                async function crearNuevaVersion(id) {
                    try {
                        const response = await $.ajax({
                            url: '/TerminosReferencia/CrearNuevaVersion',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({
                                id: id
                            })
                        });

                        return response.success;
                    } catch (error) {
                        console.error('Error al crear nueva versión:', error);
                        showToast('Error', 'No se pudo crear una nueva versión del TDR', 'error');
                        return false;
                    }
                }

                // Función para mostrar notificaciones toast
                function showToast(title, message, type) {
                    // Si ya existe un contenedor de toasts, úsalo; de lo contrario, créalo
                    if ($('#toast-container').length === 0) {
                        $('body').append('<div id="toast-container" class="position-fixed top-0 end-0 p-3" style="z-index: 1100;"></div>');
                    }

                    // Generar un ID único para el toast
                    const toastId = 'toast-' + Date.now();

                    // Definir la clase de estilo según el tipo de toast
                    let bgClass = 'bg-primary';
                    if (type === 'success') bgClass = 'bg-success';
                    if (type === 'error') bgClass = 'bg-danger';
                    if (type === 'warning') bgClass = 'bg-warning text-dark';

                    // Crear el HTML del toast
                    const toastHtml = `
                                <div id="${toastId}" class="toast align-items-center ${bgClass} text-white border-0" role="alert" aria-live="assertive" aria-atomic="true">
                                    <div class="d-flex">
                                        <div class="toast-body">
                                            <strong>${title}</strong>: ${message}
                                        </div>
                                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                                    </div>
                                </div>
                            `;

                    // Añadir el toast al contenedor
                    $('#toast-container').append(toastHtml);

                    // Inicializar y mostrar el toast
                    const toastElement = document.getElementById(toastId);
                    const toast = new bootstrap.Toast(toastElement, {
                        delay: 5000
                    });
                    toast.show();
                }
            });
        </script>
    }        <div class="d-flex align-items-center">
        <a href="@Url.Action("Index", "TerminosReferencia")" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-2"></i> Volver al listado
        </a>
        @if (Model.TDR.CurrentStateID == 5) // Aprobado
        {
            <!-- Este botón debe estar en la sección de botones de acción de la vista Editar.cshtml -->
            <a href="@Url.Action("DescargarPDF", "TerminosReferencia", new { id = Model.TDR.TDRID })" class="btn btn-success">
                <i class="fas fa-file-pdf me-1"></i> Exportar a PDF
            </a>
        }
    </div>
</div>

<br>

<!-- Información de la versión -->
<div class="card shadow mb-4">
    <div class="card-header py-3 bg-white">
        <h6 class="m-0 font-weight-bold" style="color: #2a3c7d;">Información de la Versión</h6>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-3">
                <p><strong>Versión:</strong> @version.GetProperty("VersionNumber").GetInt32()</p>
            </div>
            <div class="col-md-3">
                <p><strong>Estado:</strong> @version.GetProperty("StateName").GetString()</p>
            </div>
            <div class="col-md-3">
                <p><strong>Creado por:</strong> @version.GetProperty("CreatedByUserName").GetString()</p>
            </div>
            <div class="col-md-3">
                <p><strong>Fecha creación:</strong> @DateTime.Parse(version.GetProperty("CreatedAt").GetString()).ToString("dd/MM/yyyy HH:mm")</p>
            </div>
        </div>
    </div>
</div>

@if (!canEdit)
{
    <div class="alert alert-warning mb-4">
        <i class="fas fa-exclamation-triangle me-2"></i>
        No es posible editar este TDR porque se encuentra en estado <strong>@Model.TDR.CurrentStateName</strong>.
    </div>
}

<!-- Formulario para guardar los cambios -->
<form id="formEditar" method="post" action="@Url.Action("Guardar", "TerminosReferencia", new { id = Model.TDR.TDRID })">

    <!-- Pestañas de navegación -->
    <ul class="nav nav-tabs mb-4" id="tdrTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="tab-info" data-bs-toggle="tab" data-bs-target="#pane-info"
                    type="button" role="tab" aria-controls="pane-info" aria-selected="true"
                    style="color: #2a3c7d;">
                <i class="fas fa-info-circle me-1"></i> Información General
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="tab-alcances" data-bs-toggle="tab" data-bs-target="#pane-alcances"
                    type="button" role="tab" aria-controls="pane-alcances" aria-selected="false"
                    style="color: #495057;">
                <i class="fas fa-tasks me-1"></i> Alcances
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="tab-requisitos" data-bs-toggle="tab" data-bs-target="#pane-requisitos"
                    type="button" role="tab" aria-controls="pane-requisitos" aria-selected="false"
                    style="color: #495057;">
                <i class="fas fa-clipboard-check me-1"></i> Requisitos
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="tab-plazos" data-bs-toggle="tab" data-bs-target="#pane-plazos"
                    type="button" role="tab" aria-controls="pane-plazos" aria-selected="false"
                    style="color: #495057;">
                <i class="fas fa-calendar-alt me-1"></i> Plazos y Entregables
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="tab-condiciones" data-bs-toggle="tab" data-bs-target="#pane-condiciones"
                    type="button" role="tab" aria-controls="pane-condiciones" aria-selected="false"
                    style="color: #495057;">
                <i class="fas fa-file-contract me-1"></i> Condiciones
            </button>
        </li>
    </ul>

    <!-- Contenido de las pestañas -->
    <div class="tab-content" id="tdrTabsContent">
        <!-- Pestaña Información General -->
        <div class="tab-pane fade show active" id="pane-info" role="tabpanel" aria-labelledby="tab-info">
            @foreach (var fieldElement in fields.EnumerateArray())
            {
                string fieldName = fieldElement.GetProperty("FieldName").GetString();
                string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                string fieldComment = fieldElement.GetProperty("comment").GetString();

                // Saltar el campo denominacionContratacion (ID 4)
                if (fieldName == "denominacionContratacion")
                {
                    continue; // Salta a la siguiente iteración del bucle
                }

                if (infoGeneralFields.Contains(fieldName))
                {
                    <div class="card shadow-sm mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                @if (textareaFields.Contains(fieldName))
                                {
                                    <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                }
                                else
                                {
                                    <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                    <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                }
                            </div>

                            <!-- Campo de observaciones -->
                            <div class="mt-3">
                                @if (isAdmin && canEdit)
                                {
                                    <label class="form-label">Observaciones</label>
                                    <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(fieldComment))
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <div class="observacion-destacada">
                                            <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                        </div>
                                    }
                                    else
                                    {
                                        <label class="form-label">Sin Observaciones</label>
                                       <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Pestaña Alcances -->
        <div class="tab-pane fade" id="pane-alcances" role="tabpanel" aria-labelledby="tab-alcances">
            @foreach (var fieldElement in fields.EnumerateArray())
            {
                string fieldName = fieldElement.GetProperty("FieldName").GetString();
                string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                string fieldComment = fieldElement.GetProperty("comment").GetString();

                if (alcancesFields.Contains(fieldName))
                {
                    <div class="card shadow-sm mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                @if (textareaFields.Contains(fieldName))
                                {
                                    <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                }
                                else
                                {
                                    <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                    <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                }
                            </div>

                            <!-- Campo de observaciones -->
                            <div class="mt-3">
                                @if (isAdmin && canEdit)
                                {
                                    <label class="form-label">Observaciones</label>
                                    <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(fieldComment))
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <div class="observacion-destacada">
                                            <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                        </div>
                                    }
                                    else
                                    {
                                        <label class="form-label">Sin Observaciones</label>
                                        <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Pestaña Requisitos -->
        <div class="tab-pane fade" id="pane-requisitos" role="tabpanel" aria-labelledby="tab-requisitos">
            @foreach (var fieldElement in fields.EnumerateArray())
            {
                string fieldName = fieldElement.GetProperty("FieldName").GetString();
                string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                string fieldComment = fieldElement.GetProperty("comment").GetString();

                if (requisitosFields.Contains(fieldName))
                {
                    <div class="card shadow-sm mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                @if (textareaFields.Contains(fieldName))
                                {
                                    <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                }
                                else
                                {
                                    <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                    <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                }
                            </div>

                            <!-- Campo de observaciones -->
                            <div class="mt-3">
                                @if (isAdmin && canEdit)
                                {
                                    <label class="form-label">Observaciones</label>
                                    <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(fieldComment))
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <div class="observacion-destacada">
                                            <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                        </div>
                                    }
                                    else
                                    {
                                        <label class="form-label">Sin Observaciones</label>
                                        <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Pestaña Plazos y Entregables -->
        <div class="tab-pane fade" id="pane-plazos" role="tabpanel" aria-labelledby="tab-plazos">
            @foreach (var fieldElement in fields.EnumerateArray())
            {
                string fieldName = fieldElement.GetProperty("FieldName").GetString();
                string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                string fieldComment = fieldElement.GetProperty("comment").GetString();

                if (plazosFields.Contains(fieldName))
                {
                    <div class="card shadow-sm mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                @if (textareaFields.Contains(fieldName))
                                {
                                    <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                }
                                else
                                {
                                    <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                    <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                }
                            </div>

                            <!-- Campo de observaciones -->
                            <div class="mt-3">
                                @if (isAdmin && canEdit)
                                {
                                    <label class="form-label">Observaciones</label>
                                    <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(fieldComment))
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <div class="observacion-destacada">
                                            <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                        </div>
                                    }
                                    else
                                    {
                                        <label class="form-label">Sin Observaciones</label>
                                        <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Pestaña Condiciones -->
        <div class="tab-pane fade" id="pane-condiciones" role="tabpanel" aria-labelledby="tab-condiciones">
            @foreach (var fieldElement in fields.EnumerateArray())
            {
                string fieldName = fieldElement.GetProperty("FieldName").GetString();
                string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                string fieldComment = fieldElement.GetProperty("comment").GetString();

                @if (fieldName == "formaCondicionesPago")
                {
                    <div class="card shadow-sm mb-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                @if (canEdit)
                                {
                                    <select class="form-select campo-select" id="select_@fieldName" onchange="$('#field_@fieldName').val(this.value)">
                                        <option value="">Seleccione...</option>
                                        <option value="Única">Única</option>
                                        <option value="Mensual">Mensual</option>
                                        <option value="Por Entregables">Por Entregables</option>
                                    </select>
                                    <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                }
                                else
                                {
                                    <input type="text" class="form-control" value="@fieldContent" readonly>
                                    <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                }
                            </div>

                            <!-- Campo de observaciones -->
                            <div class="mt-3">
                                @if (isAdmin && canEdit)
                                {
                                    <label class="form-label">Observaciones</label>
                                    <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(fieldComment))
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <div class="observacion-destacada">
                                            <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                        </div>
                                    }
                                    else
                                    {
                                        <label class="form-label">Sin Observaciones</label>
                                        <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
                else
                {

                    @if (fieldName == "medidasSeguridad")
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    @if (canEdit)
                                    {
                                        <select class="form-select campo-select" id="select_@fieldName" onchange="$('#field_@fieldName').val(this.value)">
                                            <option value="">Seleccione...</option>
                                            <option value="Alto Riesgo">Alto Riesgo</option>
                                            <option value="Bajo Riesgo">Bajo Riesgo</option>
                                            <option value="No Corresponde">No Corresponde</option>
                                        </select>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <input type="text" class="form-control" value="@fieldContent" readonly>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                </div>

                                <!-- Campo de observaciones -->
                                <div class="mt-3">
                                    @if (isAdmin && canEdit)
                                    {
                                        <label class="form-label">Observaciones</label>
                                        <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                    }
                                    else
                                    {
                                        @if (!string.IsNullOrEmpty(fieldComment))
                                        {
                                            <label class="form-label">Observaciones</label>
                                            <div class="observacion-destacada">
                                                <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                            </div>
                                        }
                                        else
                                        {
                                            <label class="form-label">Sin Observaciones</label>
                                            <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        if (condicionesFields.Contains(fieldName))
                        {
                            <div class="card shadow-sm mb-3">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        @if (textareaFields.Contains(fieldName))
                                        {
                                            <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                        }
                                        else
                                        {
                                            <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                            <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                        }
                                    </div>

                                    <!-- Campo de observaciones -->
                                    <div class="mt-3">
                                        @if (isAdmin && canEdit)
                                        {
                                            <label class="form-label">Observaciones</label>
                                            <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                        }
                                        else
                                        {
                                            @if (!string.IsNullOrEmpty(fieldComment))
                                            {
                                                <label class="form-label">Observaciones</label>
                                                <div class="observacion-destacada">
                                                    <i class="fas fa-exclamation-circle me-2"></i>@fieldComment
                                                </div>
                                            }
                                            else
                                            {
                                                <label class="form-label">Sin Observaciones</label>
                                                <textarea class="form-control" readonly rows="2" style="display:none;">@fieldComment</textarea>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                } 
            }
        </div>
    </div>

    <!-- Botones de acción -->
    <div class="d-flex justify-content-between mt-4 mb-5">
        <a href="@Url.Action("Index", "TerminosReferencia")" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i> Volver al listado
        </a>

        @if (canEdit)
        {
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save me-1"></i> Guardar Cambios
            </button>
        }
    </div>
</form>


<!-- Panel de Acciones según el estado -->
<div class="card shadow mb-4">
    <div class="card-header py-3 bg-white">
        <h6 class="m-0 font-weight-bold" style="color: #2a3c7d;">Acciones</h6>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                @if (isAdmin) // Administrador
                {
                    <div class="d-flex gap-2">
                        @if (Model.TDR.CurrentStateID == 2 || Model.TDR.CurrentStateID == 4 || Model.TDR.CurrentStateID == 1) // Pendiente de Revisión o Pendiente de Revisión Corregida
                        {
                            <button type="button" class="btn btn-warning" id="btnObservarTDR">
                                <i class="fas fa-exclamation-triangle me-2"></i>Observar TDR
                            </button>
                            <button type="button" class="btn btn-success" id="btnAprobarTDR">
                                <i class="fas fa-check-circle me-2"></i>Aprobar TDR
                            </button>
                        }
                        @if (Model.TDR.CurrentStateID == 3) // Observado
                        {
                            <div class="alert alert-info mb-0">
                                <i class="fas fa-info-circle me-2"></i>
                                El TDR está observado. A la espera de las correcciones enviadas por el usuario.
                            </div>
                        }
                        @if (Model.TDR.CurrentStateID == 5) // Aprobado
                        {
                            <div class="alert alert-success mb-0">
                                <i class="fas fa-check-circle me-2"></i>
                                El TDR ha sido aprobado. Ya no se pueden realizar modificaciones.
                            </div>
                        }
                        @if (Model.TDR.CurrentStateID == 6) // Anulado
                        {
                            <div class="alert alert-dark mb-0">
                                <i class="fas fa-ban me-2"></i>
                                El TDR ha sido anulado. Ya no se pueden realizar modificaciones.
                            </div>
                        }
                    </div>
                }
                else // Usuario estándar
                {
                    <div class="d-flex gap-2">
                        @if (Model.TDR.CurrentStateID == 1) // Borrador
                        {
                            <button type="button" class="btn btn-primary" id="btnEnviarRevision">
                                <i class="fas fa-paper-plane me-2"></i>Enviar para Revisión
                            </button>
                        }
                        @if (Model.TDR.CurrentStateID == 3) // Observado
                        {
                            <button type="button" class="btn btn-primary" id="btnEnviarCorreccion">
                                <i class="fas fa-paper-plane me-2"></i>Enviar Corrección
                            </button>
                        }
                        @if (Model.TDR.CurrentStateID == 2 || Model.TDR.CurrentStateID == 4) // Pendiente de Revisión o Pendiente de Revisión Corregida
                        {
                            <div class="alert alert-warning mb-0">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                El TDR está pendiente de revisión. No se pueden realizar modificaciones hasta que sea observado o aprobado.
                            </div>
                        }
                        @if (Model.TDR.CurrentStateID == 5) // Aprobado
                        {
                            <div class="alert alert-success mb-0">
                                <i class="fas fa-check-circle me-2"></i>
                                El TDR ha sido aprobado. Ya no se pueden realizar modificaciones.
                            </div>
                        }
                        @if (Model.TDR.CurrentStateID == 6) // Anulado
                        {
                            <div class="alert alert-dark mb-0">
                                <i class="fas fa-ban me-2"></i>
                                El TDR ha sido anulado. Ya no se pueden realizar modificaciones.
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal para Observar TDR -->
<div class="modal fade" id="modalObservarTDR" tabindex="-1" aria-labelledby="modalObservarTDRLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="modalObservarTDRLabel">Observar TDR</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>El TDR será marcado como <strong>Observado</strong>.</p>
                <div class="mb-3" style="display:none;">
                    <textarea class="form-control" id="observacionMotivo" rows="3">Motivo por defecto para observación</textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-warning" id="btnConfirmarObservar">Confirmar Observación</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Aprobar TDR -->
<div class="modal fade" id="modalAprobarTDR" tabindex="-1" aria-labelledby="modalAprobarTDRLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="modalAprobarTDRLabel">Aprobar TDR</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>El TDR será marcado como <strong>Aprobado</strong>. Esta acción finaliza el proceso de revisión del documento.</p>
                <div class="mb-3" style="display:none;">
                    <textarea class="form-control" id="aprobacionMotivo" rows="3">Aprobado sin comentarios</textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-success" id="btnConfirmarAprobar">Confirmar Aprobación</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal para Enviar a Revisión -->
<div class="modal fade" id="modalEnviarRevision" tabindex="-1" aria-labelledby="modalEnviarRevisionLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #2a3c7d; color: white;">
                <h5 class="modal-title" id="modalEnviarRevisionLabel">Enviar TDR para Revisión</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>El TDR será enviado para revisión por parte del administrador. ¿Está seguro de continuar?</p>
                <p class="text-muted">No podrá realizar modificaciones hasta que sea observado o aprobado.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btnConfirmarEnviar">Enviar para Revisión</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Enviar Corrección -->
<div class="modal fade" id="modalEnviarCorreccion" tabindex="-1" aria-labelledby="modalEnviarCorreccionLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #2a3c7d; color: white;">
                <h5 class="modal-title" id="modalEnviarCorreccionLabel">Enviar Corrección del TDR</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Ha realizado correcciones al TDR observado. ¿Desea enviar estas correcciones para una nueva revisión?</p>
                <p class="text-muted">No podrá realizar modificaciones hasta que sea observado o aprobado.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btnConfirmarCorreccion">Enviar Corrección</button>
            </div>
        </div>
    </div>
</div>


