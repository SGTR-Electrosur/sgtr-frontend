@model TRElectrosur.Models.TDREditViewModel
@{
    ViewData["Title"] = "Visualizar Término de Referencia";

    // Deserializar los datos JSON en la vista
    var fieldsData = System.Text.Json.JsonDocument.Parse(Model.RawFieldsData);
    var version = fieldsData.RootElement.GetProperty("version");
    var fields = fieldsData.RootElement.GetProperty("fields");

    // Determinar si el usuario es administrador
    bool isAdmin = Model.UserRoleId == 1;

    // Determinar si puede editar según estado
    bool canEdit = Model.TDR.CurrentStateID != 6; // No se puede editar si está anulado

    // Listas de categorías de campos para organizar la visualización
    var infoGeneralFields = new List<string> { "organoUnidadOrganica", "actividadPoiAccionEstrategica", "denominacionContratacion", "finalidadPublica", "objetivoContratacion" };
    var alcancesFields = new List<string> { "alcancesServicio", "reglamentos", "seguros", "prestacionesAccesorias" };
    var requisitosFields = new List<string> { "requisitosProveedor", "experienciaProveedor", "perfilPersonal", "formacionAcademica", "experienciaPersonalClave", "capacitacion", "otros" };
    var plazosFields = new List<string> { "lugar", "plazo", "entregables", "plazoLugar", "conformidad" };
    var condicionesFields = new List<string> { "sistemaContratacion", "formaCondicionesPago", "responsabilidad", "otrasPenalidades", "medidasSeguridad", "clausula", "anexos" };

    // Diccionario para convertir nombres de campo técnicos a nombres amigables
    var friendlyNames = new Dictionary<string, string>
    {
        { "organoUnidadOrganica", "Órgano y/o Unidad Orgánica" },
        { "actividadPoiAccionEstrategica", "Actividad POI / Acción Estratégica" },
        { "denominacionContratacion", "Denominación de la Contratación" },
        { "finalidadPublica", "Finalidad Pública" },
        { "objetivoContratacion", "Objetivo de la Contratación" },
        { "alcancesServicio", "Alcances del Servicio" },
        { "reglamentos", "Reglamentos Técnicos y Normas" },
        { "seguros", "Seguros" },
        { "prestacionesAccesorias", "Prestaciones Accesorias" },
        { "requisitosProveedor", "Requisitos del Proveedor" },
        { "experienciaProveedor", "Experiencia del Proveedor" },
        { "perfilPersonal", "Perfil del Personal" },
        { "formacionAcademica", "Formación Académica" },
        { "experienciaPersonalClave", "Experiencia del Personal Clave" },
        { "capacitacion", "Capacitación" },
        { "otros", "Otros Requisitos" },
        { "lugar", "Lugar de Ejecución" },
        { "plazo", "Plazo de Ejecución" },
        { "entregables", "Entregables" },
        { "plazoLugar", "Plazo y Lugar de Presentación" },
        { "conformidad", "Conformidad" },
        { "sistemaContratacion", "Sistema de Contratación" },
        { "formaCondicionesPago", "Forma y Condiciones de Pago" },
        { "responsabilidad", "Responsabilidad del Proveedor" },
        { "otrasPenalidades", "Otras Penalidades" },
        { "medidasSeguridad", "Medidas de Seguridad" },
        { "clausula", "Cláusulas" },
        { "anexos", "Anexos" }
    };

    // Lista de campos que deben usar textarea en lugar de editor HTML
    var textareaFields = new List<string> { "organoUnidadOrganica", "actividadPoiAccionEstrategica", "denominacionContratacion", "finalidadPublica" };
}

<div class="container-fluid px-0">
    <!-- Cabecera de la página -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">@(canEdit ? "Editar" : "Visualizar") Término de Referencia</h1>
            <p class="mb-0 text-muted">
                <span class="fw-bold">ID:</span> @Model.TDR.TDRID |
                <span class="fw-bold">Tipo:</span> @Model.TDR.TDRTypeName |
                <span class="fw-bold">Estado:</span>
                @{
                    string badgeClass = "bg-secondary";

                    switch (Model.TDR.CurrentStateID)
                    {
                        case 1: // Borrador
                            badgeClass = "bg-info";
                            break;
                        case 2: // Pendiente de Revisión
                        case 4: // Pendiente de Revisión Corregida
                            badgeClass = "bg-warning text-dark";
                            break;
                        case 3: // Observado
                            badgeClass = "bg-danger";
                            break;
                        case 5: // Aprobado
                            badgeClass = "bg-success";
                            break;
                        case 6: // Anulado
                            badgeClass = "bg-dark";
                            break;
                    }
                }
                <span class="badge @badgeClass">@Model.TDR.CurrentStateName</span>
            </p>
        </div>
        <div class="d-flex align-items-center">
            <a href="@Url.Action("Index", "TerminosReferencia")" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i> Volver al listado
            </a>
        </div>
    </div>

    <!-- Información de la versión -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 bg-white">
            <h6 class="m-0 font-weight-bold" style="color: #2a3c7d;">Información de la Versión</h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <p><strong>Versión:</strong> @version.GetProperty("VersionNumber").GetInt32()</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Estado:</strong> @version.GetProperty("StateName").GetString()</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Creado por:</strong> @version.GetProperty("CreatedByUserName").GetString()</p>
                </div>
                <div class="col-md-3">
                    <p><strong>Fecha creación:</strong> @DateTime.Parse(version.GetProperty("CreatedAt").GetString()).ToString("dd/MM/yyyy HH:mm")</p>
                </div>
            </div>
        </div>
    </div>

    @if (!canEdit)
    {
        <div class="alert alert-warning mb-4">
            <i class="fas fa-exclamation-triangle me-2"></i>
            No es posible editar este TDR porque se encuentra en estado <strong>@Model.TDR.CurrentStateName</strong>.
        </div>
    }

    <!-- Formulario para guardar los cambios -->
    <form id="formEditar" method="post" action="@Url.Action("Guardar", "TerminosReferencia", new { id = Model.TDR.TDRID })">

        <!-- Pestañas de navegación -->
        <ul class="nav nav-tabs mb-4" id="tdrTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="tab-info" data-bs-toggle="tab" data-bs-target="#pane-info"
                        type="button" role="tab" aria-controls="pane-info" aria-selected="true"
                        style="color: #2a3c7d;">
                    <i class="fas fa-info-circle me-1"></i> Información General
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="tab-alcances" data-bs-toggle="tab" data-bs-target="#pane-alcances"
                        type="button" role="tab" aria-controls="pane-alcances" aria-selected="false"
                        style="color: #495057;">
                    <i class="fas fa-tasks me-1"></i> Alcances
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="tab-requisitos" data-bs-toggle="tab" data-bs-target="#pane-requisitos"
                        type="button" role="tab" aria-controls="pane-requisitos" aria-selected="false"
                        style="color: #495057;">
                    <i class="fas fa-clipboard-check me-1"></i> Requisitos
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="tab-plazos" data-bs-toggle="tab" data-bs-target="#pane-plazos"
                        type="button" role="tab" aria-controls="pane-plazos" aria-selected="false"
                        style="color: #495057;">
                    <i class="fas fa-calendar-alt me-1"></i> Plazos y Entregables
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="tab-condiciones" data-bs-toggle="tab" data-bs-target="#pane-condiciones"
                        type="button" role="tab" aria-controls="pane-condiciones" aria-selected="false"
                        style="color: #495057;">
                    <i class="fas fa-file-contract me-1"></i> Condiciones
                </button>
            </li>
        </ul>

        <!-- Contenido de las pestañas -->
        <div class="tab-content" id="tdrTabsContent">
            <!-- Pestaña Información General -->
            <div class="tab-pane fade show active" id="pane-info" role="tabpanel" aria-labelledby="tab-info">
                @foreach (var fieldElement in fields.EnumerateArray())
                {
                    string fieldName = fieldElement.GetProperty("FieldName").GetString();
                    string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                    string fieldComment = fieldElement.GetProperty("comment").GetString();

                    if (infoGeneralFields.Contains(fieldName))
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    @if (textareaFields.Contains(fieldName))
                                    {
                                        <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                </div>

                                <!-- Campo de observaciones -->
                                <div class="mt-3">
                                    <label class="form-label">Observaciones</label>
                                    @if (isAdmin && canEdit)
                                    {
                                        <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                    }
                                    else
                                    {
                                        <textarea class="form-control" readonly rows="2">@fieldComment</textarea>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Pestaña Alcances -->
            <div class="tab-pane fade" id="pane-alcances" role="tabpanel" aria-labelledby="tab-alcances">
                @foreach (var fieldElement in fields.EnumerateArray())
                {
                    string fieldName = fieldElement.GetProperty("FieldName").GetString();
                    string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                    string fieldComment = fieldElement.GetProperty("comment").GetString();

                    if (alcancesFields.Contains(fieldName))
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    @if (textareaFields.Contains(fieldName))
                                    {
                                        <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                </div>

                                <!-- Campo de observaciones -->
                                <div class="mt-3">
                                    <label class="form-label">Observaciones</label>
                                    @if (isAdmin && canEdit)
                                    {
                                        <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                    }
                                    else
                                    {
                                        <textarea class="form-control" readonly rows="2">@fieldComment</textarea>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Pestaña Requisitos -->
            <div class="tab-pane fade" id="pane-requisitos" role="tabpanel" aria-labelledby="tab-requisitos">
                @foreach (var fieldElement in fields.EnumerateArray())
                {
                    string fieldName = fieldElement.GetProperty("FieldName").GetString();
                    string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                    string fieldComment = fieldElement.GetProperty("comment").GetString();

                    if (requisitosFields.Contains(fieldName))
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    @if (textareaFields.Contains(fieldName))
                                    {
                                        <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                </div>

                                <!-- Campo de observaciones -->
                                <div class="mt-3">
                                    <label class="form-label">Observaciones</label>
                                    @if (isAdmin && canEdit)
                                    {
                                        <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                    }
                                    else
                                    {
                                        <textarea class="form-control" readonly rows="2">@fieldComment</textarea>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Pestaña Plazos y Entregables -->
            <div class="tab-pane fade" id="pane-plazos" role="tabpanel" aria-labelledby="tab-plazos">
                @foreach (var fieldElement in fields.EnumerateArray())
                {
                    string fieldName = fieldElement.GetProperty("FieldName").GetString();
                    string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                    string fieldComment = fieldElement.GetProperty("comment").GetString();

                    if (plazosFields.Contains(fieldName))
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    @if (textareaFields.Contains(fieldName))
                                    {
                                        <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                </div>

                                <!-- Campo de observaciones -->
                                <div class="mt-3">
                                    <label class="form-label">Observaciones</label>
                                    @if (isAdmin && canEdit)
                                    {
                                        <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                    }
                                    else
                                    {
                                        <textarea class="form-control" readonly rows="2">@fieldComment</textarea>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Pestaña Condiciones -->
            <div class="tab-pane fade" id="pane-condiciones" role="tabpanel" aria-labelledby="tab-condiciones">
                @foreach (var fieldElement in fields.EnumerateArray())
                {
                    string fieldName = fieldElement.GetProperty("FieldName").GetString();
                    string fieldContent = fieldElement.GetProperty("HtmlContent").GetString();
                    string fieldComment = fieldElement.GetProperty("comment").GetString();

                    if (condicionesFields.Contains(fieldName))
                    {
                        <div class="card shadow-sm mb-3">
                            <div class="card-header bg-light">
                                <h6 class="mb-0">@(friendlyNames.ContainsKey(fieldName) ? friendlyNames[fieldName] : fieldName)</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    @if (textareaFields.Contains(fieldName))
                                    {
                                        <textarea class="form-control" name="fields[@fieldName]" rows="4" @(canEdit ? "" : "readonly")>@fieldContent</textarea>
                                    }
                                    else
                                    {
                                        <div id="editor_@fieldName" class="html-editor" @(canEdit ? "" : "data-readonly='true'")>@Html.Raw(fieldContent)</div>
                                        <textarea name="fields[@fieldName]" id="field_@fieldName" class="d-none">@fieldContent</textarea>
                                    }
                                </div>

                                <!-- Campo de observaciones -->
                                <div class="mt-3">
                                    <label class="form-label">Observaciones</label>
                                    @if (isAdmin && canEdit)
                                    {
                                        <textarea class="form-control" name="observations[@fieldName]" rows="2">@fieldComment</textarea>
                                    }
                                    else
                                    {
                                        <textarea class="form-control" readonly rows="2">@fieldComment</textarea>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Botones de acción -->
        <div class="d-flex justify-content-between mt-4 mb-5">
            <a href="@Url.Action("Index", "TerminosReferencia")" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i> Volver al listado
            </a>

            @if (canEdit)
            {
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save me-1"></i> Guardar Cambios
                </button>
            }
        </div>
    </form>
</div>

<style>
    .nav-tabs .nav-link {
        border-top-left-radius: 0.5rem;
        border-top-right-radius: 0.5rem;
    }

        .nav-tabs .nav-link.active {
            border-color: #dee2e6 #dee2e6 #fff;
            font-weight: 600;
        }

    .card-header h6 {
        margin-bottom: 0;
        font-size: 1rem;
        font-weight: 500;
    }

    .badge {
        font-size: 0.8rem;
        padding: 0.35em 0.65em;
    }

    .form-label {
        font-size: 0.875rem;
        color: #6c757d;
    }

    /* Estilos para el editor HTML */
    .html-editor {
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        padding: 0.5rem;
        min-height: 150px;
        background-color: white;
    }
</style>

@section Scripts {
    <!-- CKEditor 5 para editores HTML -->
    <script src="https://cdn.ckeditor.com/ckeditor5/37.1.0/classic/ckeditor.js"></script>

    <script>
        $(document).ready(function () {
            // Colorear las pestañas al hacer clic
            $('button[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
                // Quitar el color azul de todas las pestañas
                $('button[data-bs-toggle="tab"]').css('color', '#495057');
                // Aplicar color azul a la pestaña activa
                $(this).css('color', '#2a3c7d');
            });

            // Inicializar editores HTML
            $('.html-editor').each(function () {
                const editorId = $(this).attr('id');
                const fieldId = editorId.replace('editor_', 'field_');
                const isReadOnly = $(this).attr('data-readonly') === 'true';

                ClassicEditor
                    .create(document.getElementById(editorId), {
                        toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'insertTable', 'undo', 'redo']
                    })
                    .then(editor => {
                        // Hacer el editor de solo lectura si es necesario
                        if (isReadOnly) {
                            editor.isReadOnly = true;
                        }

                        // Actualizar el textarea oculto cuando cambia el contenido
                        editor.model.document.on('change:data', () => {
                            document.getElementById(fieldId).value = editor.getData();
                        });
                    })
                    .catch(error => {
                        console.error(error);
                    });
            });

            // Proceso antes de enviar el formulario para asegurar que todos los datos estén en sus textareas correspondientes
            $('#formEditar').on('submit', function (e) {
                // No hay necesidad de prevenir el submit por defecto, queremos que el formulario se envíe normalmente
            });
        });
    </script>
}